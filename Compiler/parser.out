Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement
Rule 1     statement -> expression_statement
Rule 2     statement -> selection_statement
Rule 3     statement -> iteration_statement
Rule 4     type_specifier -> INT
Rule 5     type_specifier -> BOOL
Rule 6     type_specifier -> STRING
Rule 7     expression_statement -> declaration_expression SEMI
Rule 8     declaration_expression -> assignment_expression
Rule 9     declaration_expression -> type_specifier declaration_expression
Rule 10    selection_statement -> IF LPAREN logical_expression RPAREN LBRACE statement RBRACE
Rule 11    selection_statement -> selection_statement ELSE LBRACE statement RBRACE
Rule 12    iteration_statement -> WHILE LPAREN logical_expression RPAREN statement
Rule 13    iteration_statement -> DO statement WHILE LPAREN logical_expression RPAREN SEMI
Rule 14    assignment_expression -> additive_expression
Rule 15    assignment_expression -> assignment_expression assignment_operators additive_expression
Rule 16    logical_expression -> equality_expression
Rule 17    logical_expression -> logical_expression logical_operators equality_expression
Rule 18    equality_expression -> relational_expression
Rule 19    equality_expression -> equality_expression equality_operators relational_expression
Rule 20    relational_expression -> additive_expression
Rule 21    relational_expression -> relational_expression relational_operators additive_expression
Rule 22    additive_expression -> multiplicative_expression
Rule 23    additive_expression -> additive_expression additive_operators multiplicative_expression
Rule 24    multiplicative_expression -> primary_expression
Rule 25    multiplicative_expression -> multiplicative_expression multiplicative_operators primary_expression
Rule 26    assignment_operators -> EQUALS
Rule 27    logical_operators -> LAND
Rule 28    logical_operators -> LOR
Rule 29    equality_operators -> EQ
Rule 30    equality_operators -> NE
Rule 31    relational_operators -> LT
Rule 32    relational_operators -> GT
Rule 33    relational_operators -> LE
Rule 34    relational_operators -> GE
Rule 35    additive_operators -> PLUS
Rule 36    additive_operators -> MINUS
Rule 37    multiplicative_operators -> TIMES
Rule 38    multiplicative_operators -> DIVIDE
Rule 39    primary_expression -> ID
Rule 40    primary_expression -> DIGIT

Terminals, with rules where they appear

BOOL                 : 5
DIGIT                : 40
DIVIDE               : 38
DO                   : 13
ELSE                 : 11
EQ                   : 29
EQUALS               : 26
GE                   : 34
GT                   : 32
ID                   : 39
IF                   : 10
INT                  : 4
LAND                 : 27
LBRACE               : 10 11
LE                   : 33
LOR                  : 28
LPAREN               : 10 12 13
LT                   : 31
MINUS                : 36
NE                   : 30
PLUS                 : 35
RBRACE               : 10 11
RPAREN               : 10 12 13
SEMI                 : 7 13
STRING               : 6
TIMES                : 37
WHILE                : 12 13
error                : 

Nonterminals, with rules where they appear

additive_expression  : 14 15 20 21 23
additive_operators   : 23
assignment_expression : 8 15
assignment_operators : 15
declaration_expression : 7 9
equality_expression  : 16 17 19
equality_operators   : 19
expression_statement : 1
iteration_statement  : 3
logical_expression   : 10 12 13 17
logical_operators    : 17
multiplicative_expression : 22 23 25
multiplicative_operators : 25
primary_expression   : 24 25
relational_expression : 18 19 21
relational_operators : 21
selection_statement  : 2 11
statement            : 10 11 12 13 0
type_specifier       : 9

Parsing method: LALR

state 0

    (0) S' -> . statement
    (1) statement -> . expression_statement
    (2) statement -> . selection_statement
    (3) statement -> . iteration_statement
    (7) expression_statement -> . declaration_expression SEMI
    (10) selection_statement -> . IF LPAREN logical_expression RPAREN LBRACE statement RBRACE
    (11) selection_statement -> . selection_statement ELSE LBRACE statement RBRACE
    (12) iteration_statement -> . WHILE LPAREN logical_expression RPAREN statement
    (13) iteration_statement -> . DO statement WHILE LPAREN logical_expression RPAREN SEMI
    (8) declaration_expression -> . assignment_expression
    (9) declaration_expression -> . type_specifier declaration_expression
    (14) assignment_expression -> . additive_expression
    (15) assignment_expression -> . assignment_expression assignment_operators additive_expression
    (4) type_specifier -> . INT
    (5) type_specifier -> . BOOL
    (6) type_specifier -> . STRING
    (22) additive_expression -> . multiplicative_expression
    (23) additive_expression -> . additive_expression additive_operators multiplicative_expression
    (24) multiplicative_expression -> . primary_expression
    (25) multiplicative_expression -> . multiplicative_expression multiplicative_operators primary_expression
    (39) primary_expression -> . ID
    (40) primary_expression -> . DIGIT

    IF              shift and go to state 6
    WHILE           shift and go to state 7
    DO              shift and go to state 8
    INT             shift and go to state 12
    BOOL            shift and go to state 13
    STRING          shift and go to state 14
    ID              shift and go to state 17
    DIGIT           shift and go to state 18

    statement                      shift and go to state 1
    expression_statement           shift and go to state 2
    selection_statement            shift and go to state 3
    iteration_statement            shift and go to state 4
    declaration_expression         shift and go to state 5
    assignment_expression          shift and go to state 9
    type_specifier                 shift and go to state 10
    additive_expression            shift and go to state 11
    multiplicative_expression      shift and go to state 15
    primary_expression             shift and go to state 16

state 1

    (0) S' -> statement .



state 2

    (1) statement -> expression_statement .

    $end            reduce using rule 1 (statement -> expression_statement .)
    WHILE           reduce using rule 1 (statement -> expression_statement .)
    RBRACE          reduce using rule 1 (statement -> expression_statement .)


state 3

    (2) statement -> selection_statement .
    (11) selection_statement -> selection_statement . ELSE LBRACE statement RBRACE

    $end            reduce using rule 2 (statement -> selection_statement .)
    WHILE           reduce using rule 2 (statement -> selection_statement .)
    RBRACE          reduce using rule 2 (statement -> selection_statement .)
    ELSE            shift and go to state 19


state 4

    (3) statement -> iteration_statement .

    $end            reduce using rule 3 (statement -> iteration_statement .)
    WHILE           reduce using rule 3 (statement -> iteration_statement .)
    RBRACE          reduce using rule 3 (statement -> iteration_statement .)


state 5

    (7) expression_statement -> declaration_expression . SEMI

    SEMI            shift and go to state 20


state 6

    (10) selection_statement -> IF . LPAREN logical_expression RPAREN LBRACE statement RBRACE

    LPAREN          shift and go to state 21


state 7

    (12) iteration_statement -> WHILE . LPAREN logical_expression RPAREN statement

    LPAREN          shift and go to state 22


state 8

    (13) iteration_statement -> DO . statement WHILE LPAREN logical_expression RPAREN SEMI
    (1) statement -> . expression_statement
    (2) statement -> . selection_statement
    (3) statement -> . iteration_statement
    (7) expression_statement -> . declaration_expression SEMI
    (10) selection_statement -> . IF LPAREN logical_expression RPAREN LBRACE statement RBRACE
    (11) selection_statement -> . selection_statement ELSE LBRACE statement RBRACE
    (12) iteration_statement -> . WHILE LPAREN logical_expression RPAREN statement
    (13) iteration_statement -> . DO statement WHILE LPAREN logical_expression RPAREN SEMI
    (8) declaration_expression -> . assignment_expression
    (9) declaration_expression -> . type_specifier declaration_expression
    (14) assignment_expression -> . additive_expression
    (15) assignment_expression -> . assignment_expression assignment_operators additive_expression
    (4) type_specifier -> . INT
    (5) type_specifier -> . BOOL
    (6) type_specifier -> . STRING
    (22) additive_expression -> . multiplicative_expression
    (23) additive_expression -> . additive_expression additive_operators multiplicative_expression
    (24) multiplicative_expression -> . primary_expression
    (25) multiplicative_expression -> . multiplicative_expression multiplicative_operators primary_expression
    (39) primary_expression -> . ID
    (40) primary_expression -> . DIGIT

    IF              shift and go to state 6
    WHILE           shift and go to state 7
    DO              shift and go to state 8
    INT             shift and go to state 12
    BOOL            shift and go to state 13
    STRING          shift and go to state 14
    ID              shift and go to state 17
    DIGIT           shift and go to state 18

    statement                      shift and go to state 23
    expression_statement           shift and go to state 2
    selection_statement            shift and go to state 3
    iteration_statement            shift and go to state 4
    declaration_expression         shift and go to state 5
    assignment_expression          shift and go to state 9
    type_specifier                 shift and go to state 10
    additive_expression            shift and go to state 11
    multiplicative_expression      shift and go to state 15
    primary_expression             shift and go to state 16

state 9

    (8) declaration_expression -> assignment_expression .
    (15) assignment_expression -> assignment_expression . assignment_operators additive_expression
    (26) assignment_operators -> . EQUALS

    SEMI            reduce using rule 8 (declaration_expression -> assignment_expression .)
    EQUALS          shift and go to state 25

    assignment_operators           shift and go to state 24

state 10

    (9) declaration_expression -> type_specifier . declaration_expression
    (8) declaration_expression -> . assignment_expression
    (9) declaration_expression -> . type_specifier declaration_expression
    (14) assignment_expression -> . additive_expression
    (15) assignment_expression -> . assignment_expression assignment_operators additive_expression
    (4) type_specifier -> . INT
    (5) type_specifier -> . BOOL
    (6) type_specifier -> . STRING
    (22) additive_expression -> . multiplicative_expression
    (23) additive_expression -> . additive_expression additive_operators multiplicative_expression
    (24) multiplicative_expression -> . primary_expression
    (25) multiplicative_expression -> . multiplicative_expression multiplicative_operators primary_expression
    (39) primary_expression -> . ID
    (40) primary_expression -> . DIGIT

    INT             shift and go to state 12
    BOOL            shift and go to state 13
    STRING          shift and go to state 14
    ID              shift and go to state 17
    DIGIT           shift and go to state 18

    type_specifier                 shift and go to state 10
    declaration_expression         shift and go to state 26
    assignment_expression          shift and go to state 9
    additive_expression            shift and go to state 11
    multiplicative_expression      shift and go to state 15
    primary_expression             shift and go to state 16

state 11

    (14) assignment_expression -> additive_expression .
    (23) additive_expression -> additive_expression . additive_operators multiplicative_expression
    (35) additive_operators -> . PLUS
    (36) additive_operators -> . MINUS

    EQUALS          reduce using rule 14 (assignment_expression -> additive_expression .)
    SEMI            reduce using rule 14 (assignment_expression -> additive_expression .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29

    additive_operators             shift and go to state 27

state 12

    (4) type_specifier -> INT .

    INT             reduce using rule 4 (type_specifier -> INT .)
    BOOL            reduce using rule 4 (type_specifier -> INT .)
    STRING          reduce using rule 4 (type_specifier -> INT .)
    ID              reduce using rule 4 (type_specifier -> INT .)
    DIGIT           reduce using rule 4 (type_specifier -> INT .)


state 13

    (5) type_specifier -> BOOL .

    INT             reduce using rule 5 (type_specifier -> BOOL .)
    BOOL            reduce using rule 5 (type_specifier -> BOOL .)
    STRING          reduce using rule 5 (type_specifier -> BOOL .)
    ID              reduce using rule 5 (type_specifier -> BOOL .)
    DIGIT           reduce using rule 5 (type_specifier -> BOOL .)


state 14

    (6) type_specifier -> STRING .

    INT             reduce using rule 6 (type_specifier -> STRING .)
    BOOL            reduce using rule 6 (type_specifier -> STRING .)
    STRING          reduce using rule 6 (type_specifier -> STRING .)
    ID              reduce using rule 6 (type_specifier -> STRING .)
    DIGIT           reduce using rule 6 (type_specifier -> STRING .)


state 15

    (22) additive_expression -> multiplicative_expression .
    (25) multiplicative_expression -> multiplicative_expression . multiplicative_operators primary_expression
    (37) multiplicative_operators -> . TIMES
    (38) multiplicative_operators -> . DIVIDE

    PLUS            reduce using rule 22 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 22 (additive_expression -> multiplicative_expression .)
    EQUALS          reduce using rule 22 (additive_expression -> multiplicative_expression .)
    SEMI            reduce using rule 22 (additive_expression -> multiplicative_expression .)
    LT              reduce using rule 22 (additive_expression -> multiplicative_expression .)
    GT              reduce using rule 22 (additive_expression -> multiplicative_expression .)
    LE              reduce using rule 22 (additive_expression -> multiplicative_expression .)
    GE              reduce using rule 22 (additive_expression -> multiplicative_expression .)
    EQ              reduce using rule 22 (additive_expression -> multiplicative_expression .)
    NE              reduce using rule 22 (additive_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 22 (additive_expression -> multiplicative_expression .)
    LAND            reduce using rule 22 (additive_expression -> multiplicative_expression .)
    LOR             reduce using rule 22 (additive_expression -> multiplicative_expression .)
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32

    multiplicative_operators       shift and go to state 30

state 16

    (24) multiplicative_expression -> primary_expression .

    TIMES           reduce using rule 24 (multiplicative_expression -> primary_expression .)
    DIVIDE          reduce using rule 24 (multiplicative_expression -> primary_expression .)
    PLUS            reduce using rule 24 (multiplicative_expression -> primary_expression .)
    MINUS           reduce using rule 24 (multiplicative_expression -> primary_expression .)
    EQUALS          reduce using rule 24 (multiplicative_expression -> primary_expression .)
    SEMI            reduce using rule 24 (multiplicative_expression -> primary_expression .)
    LT              reduce using rule 24 (multiplicative_expression -> primary_expression .)
    GT              reduce using rule 24 (multiplicative_expression -> primary_expression .)
    LE              reduce using rule 24 (multiplicative_expression -> primary_expression .)
    GE              reduce using rule 24 (multiplicative_expression -> primary_expression .)
    EQ              reduce using rule 24 (multiplicative_expression -> primary_expression .)
    NE              reduce using rule 24 (multiplicative_expression -> primary_expression .)
    RPAREN          reduce using rule 24 (multiplicative_expression -> primary_expression .)
    LAND            reduce using rule 24 (multiplicative_expression -> primary_expression .)
    LOR             reduce using rule 24 (multiplicative_expression -> primary_expression .)


state 17

    (39) primary_expression -> ID .

    TIMES           reduce using rule 39 (primary_expression -> ID .)
    DIVIDE          reduce using rule 39 (primary_expression -> ID .)
    PLUS            reduce using rule 39 (primary_expression -> ID .)
    MINUS           reduce using rule 39 (primary_expression -> ID .)
    EQUALS          reduce using rule 39 (primary_expression -> ID .)
    SEMI            reduce using rule 39 (primary_expression -> ID .)
    LT              reduce using rule 39 (primary_expression -> ID .)
    GT              reduce using rule 39 (primary_expression -> ID .)
    LE              reduce using rule 39 (primary_expression -> ID .)
    GE              reduce using rule 39 (primary_expression -> ID .)
    EQ              reduce using rule 39 (primary_expression -> ID .)
    NE              reduce using rule 39 (primary_expression -> ID .)
    RPAREN          reduce using rule 39 (primary_expression -> ID .)
    LAND            reduce using rule 39 (primary_expression -> ID .)
    LOR             reduce using rule 39 (primary_expression -> ID .)


state 18

    (40) primary_expression -> DIGIT .

    TIMES           reduce using rule 40 (primary_expression -> DIGIT .)
    DIVIDE          reduce using rule 40 (primary_expression -> DIGIT .)
    PLUS            reduce using rule 40 (primary_expression -> DIGIT .)
    MINUS           reduce using rule 40 (primary_expression -> DIGIT .)
    EQUALS          reduce using rule 40 (primary_expression -> DIGIT .)
    SEMI            reduce using rule 40 (primary_expression -> DIGIT .)
    LT              reduce using rule 40 (primary_expression -> DIGIT .)
    GT              reduce using rule 40 (primary_expression -> DIGIT .)
    LE              reduce using rule 40 (primary_expression -> DIGIT .)
    GE              reduce using rule 40 (primary_expression -> DIGIT .)
    EQ              reduce using rule 40 (primary_expression -> DIGIT .)
    NE              reduce using rule 40 (primary_expression -> DIGIT .)
    RPAREN          reduce using rule 40 (primary_expression -> DIGIT .)
    LAND            reduce using rule 40 (primary_expression -> DIGIT .)
    LOR             reduce using rule 40 (primary_expression -> DIGIT .)


state 19

    (11) selection_statement -> selection_statement ELSE . LBRACE statement RBRACE

    LBRACE          shift and go to state 33


state 20

    (7) expression_statement -> declaration_expression SEMI .

    $end            reduce using rule 7 (expression_statement -> declaration_expression SEMI .)
    WHILE           reduce using rule 7 (expression_statement -> declaration_expression SEMI .)
    RBRACE          reduce using rule 7 (expression_statement -> declaration_expression SEMI .)


state 21

    (10) selection_statement -> IF LPAREN . logical_expression RPAREN LBRACE statement RBRACE
    (16) logical_expression -> . equality_expression
    (17) logical_expression -> . logical_expression logical_operators equality_expression
    (18) equality_expression -> . relational_expression
    (19) equality_expression -> . equality_expression equality_operators relational_expression
    (20) relational_expression -> . additive_expression
    (21) relational_expression -> . relational_expression relational_operators additive_expression
    (22) additive_expression -> . multiplicative_expression
    (23) additive_expression -> . additive_expression additive_operators multiplicative_expression
    (24) multiplicative_expression -> . primary_expression
    (25) multiplicative_expression -> . multiplicative_expression multiplicative_operators primary_expression
    (39) primary_expression -> . ID
    (40) primary_expression -> . DIGIT

    ID              shift and go to state 17
    DIGIT           shift and go to state 18

    logical_expression             shift and go to state 34
    equality_expression            shift and go to state 35
    relational_expression          shift and go to state 36
    additive_expression            shift and go to state 37
    multiplicative_expression      shift and go to state 15
    primary_expression             shift and go to state 16

state 22

    (12) iteration_statement -> WHILE LPAREN . logical_expression RPAREN statement
    (16) logical_expression -> . equality_expression
    (17) logical_expression -> . logical_expression logical_operators equality_expression
    (18) equality_expression -> . relational_expression
    (19) equality_expression -> . equality_expression equality_operators relational_expression
    (20) relational_expression -> . additive_expression
    (21) relational_expression -> . relational_expression relational_operators additive_expression
    (22) additive_expression -> . multiplicative_expression
    (23) additive_expression -> . additive_expression additive_operators multiplicative_expression
    (24) multiplicative_expression -> . primary_expression
    (25) multiplicative_expression -> . multiplicative_expression multiplicative_operators primary_expression
    (39) primary_expression -> . ID
    (40) primary_expression -> . DIGIT

    ID              shift and go to state 17
    DIGIT           shift and go to state 18

    logical_expression             shift and go to state 38
    equality_expression            shift and go to state 35
    relational_expression          shift and go to state 36
    additive_expression            shift and go to state 37
    multiplicative_expression      shift and go to state 15
    primary_expression             shift and go to state 16

state 23

    (13) iteration_statement -> DO statement . WHILE LPAREN logical_expression RPAREN SEMI

    WHILE           shift and go to state 39


state 24

    (15) assignment_expression -> assignment_expression assignment_operators . additive_expression
    (22) additive_expression -> . multiplicative_expression
    (23) additive_expression -> . additive_expression additive_operators multiplicative_expression
    (24) multiplicative_expression -> . primary_expression
    (25) multiplicative_expression -> . multiplicative_expression multiplicative_operators primary_expression
    (39) primary_expression -> . ID
    (40) primary_expression -> . DIGIT

    ID              shift and go to state 17
    DIGIT           shift and go to state 18

    additive_expression            shift and go to state 40
    multiplicative_expression      shift and go to state 15
    primary_expression             shift and go to state 16

state 25

    (26) assignment_operators -> EQUALS .

    ID              reduce using rule 26 (assignment_operators -> EQUALS .)
    DIGIT           reduce using rule 26 (assignment_operators -> EQUALS .)


state 26

    (9) declaration_expression -> type_specifier declaration_expression .

    SEMI            reduce using rule 9 (declaration_expression -> type_specifier declaration_expression .)


state 27

    (23) additive_expression -> additive_expression additive_operators . multiplicative_expression
    (24) multiplicative_expression -> . primary_expression
    (25) multiplicative_expression -> . multiplicative_expression multiplicative_operators primary_expression
    (39) primary_expression -> . ID
    (40) primary_expression -> . DIGIT

    ID              shift and go to state 17
    DIGIT           shift and go to state 18

    multiplicative_expression      shift and go to state 41
    primary_expression             shift and go to state 16

state 28

    (35) additive_operators -> PLUS .

    ID              reduce using rule 35 (additive_operators -> PLUS .)
    DIGIT           reduce using rule 35 (additive_operators -> PLUS .)


state 29

    (36) additive_operators -> MINUS .

    ID              reduce using rule 36 (additive_operators -> MINUS .)
    DIGIT           reduce using rule 36 (additive_operators -> MINUS .)


state 30

    (25) multiplicative_expression -> multiplicative_expression multiplicative_operators . primary_expression
    (39) primary_expression -> . ID
    (40) primary_expression -> . DIGIT

    ID              shift and go to state 17
    DIGIT           shift and go to state 18

    primary_expression             shift and go to state 42

state 31

    (37) multiplicative_operators -> TIMES .

    ID              reduce using rule 37 (multiplicative_operators -> TIMES .)
    DIGIT           reduce using rule 37 (multiplicative_operators -> TIMES .)


state 32

    (38) multiplicative_operators -> DIVIDE .

    ID              reduce using rule 38 (multiplicative_operators -> DIVIDE .)
    DIGIT           reduce using rule 38 (multiplicative_operators -> DIVIDE .)


state 33

    (11) selection_statement -> selection_statement ELSE LBRACE . statement RBRACE
    (1) statement -> . expression_statement
    (2) statement -> . selection_statement
    (3) statement -> . iteration_statement
    (7) expression_statement -> . declaration_expression SEMI
    (10) selection_statement -> . IF LPAREN logical_expression RPAREN LBRACE statement RBRACE
    (11) selection_statement -> . selection_statement ELSE LBRACE statement RBRACE
    (12) iteration_statement -> . WHILE LPAREN logical_expression RPAREN statement
    (13) iteration_statement -> . DO statement WHILE LPAREN logical_expression RPAREN SEMI
    (8) declaration_expression -> . assignment_expression
    (9) declaration_expression -> . type_specifier declaration_expression
    (14) assignment_expression -> . additive_expression
    (15) assignment_expression -> . assignment_expression assignment_operators additive_expression
    (4) type_specifier -> . INT
    (5) type_specifier -> . BOOL
    (6) type_specifier -> . STRING
    (22) additive_expression -> . multiplicative_expression
    (23) additive_expression -> . additive_expression additive_operators multiplicative_expression
    (24) multiplicative_expression -> . primary_expression
    (25) multiplicative_expression -> . multiplicative_expression multiplicative_operators primary_expression
    (39) primary_expression -> . ID
    (40) primary_expression -> . DIGIT

    IF              shift and go to state 6
    WHILE           shift and go to state 7
    DO              shift and go to state 8
    INT             shift and go to state 12
    BOOL            shift and go to state 13
    STRING          shift and go to state 14
    ID              shift and go to state 17
    DIGIT           shift and go to state 18

    selection_statement            shift and go to state 3
    statement                      shift and go to state 43
    expression_statement           shift and go to state 2
    iteration_statement            shift and go to state 4
    declaration_expression         shift and go to state 5
    assignment_expression          shift and go to state 9
    type_specifier                 shift and go to state 10
    additive_expression            shift and go to state 11
    multiplicative_expression      shift and go to state 15
    primary_expression             shift and go to state 16

state 34

    (10) selection_statement -> IF LPAREN logical_expression . RPAREN LBRACE statement RBRACE
    (17) logical_expression -> logical_expression . logical_operators equality_expression
    (27) logical_operators -> . LAND
    (28) logical_operators -> . LOR

    RPAREN          shift and go to state 44
    LAND            shift and go to state 46
    LOR             shift and go to state 47

    logical_operators              shift and go to state 45

state 35

    (16) logical_expression -> equality_expression .
    (19) equality_expression -> equality_expression . equality_operators relational_expression
    (29) equality_operators -> . EQ
    (30) equality_operators -> . NE

    RPAREN          reduce using rule 16 (logical_expression -> equality_expression .)
    LAND            reduce using rule 16 (logical_expression -> equality_expression .)
    LOR             reduce using rule 16 (logical_expression -> equality_expression .)
    EQ              shift and go to state 49
    NE              shift and go to state 50

    equality_operators             shift and go to state 48

state 36

    (18) equality_expression -> relational_expression .
    (21) relational_expression -> relational_expression . relational_operators additive_expression
    (31) relational_operators -> . LT
    (32) relational_operators -> . GT
    (33) relational_operators -> . LE
    (34) relational_operators -> . GE

    EQ              reduce using rule 18 (equality_expression -> relational_expression .)
    NE              reduce using rule 18 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 18 (equality_expression -> relational_expression .)
    LAND            reduce using rule 18 (equality_expression -> relational_expression .)
    LOR             reduce using rule 18 (equality_expression -> relational_expression .)
    LT              shift and go to state 52
    GT              shift and go to state 53
    LE              shift and go to state 54
    GE              shift and go to state 55

    relational_operators           shift and go to state 51

state 37

    (20) relational_expression -> additive_expression .
    (23) additive_expression -> additive_expression . additive_operators multiplicative_expression
    (35) additive_operators -> . PLUS
    (36) additive_operators -> . MINUS

    LT              reduce using rule 20 (relational_expression -> additive_expression .)
    GT              reduce using rule 20 (relational_expression -> additive_expression .)
    LE              reduce using rule 20 (relational_expression -> additive_expression .)
    GE              reduce using rule 20 (relational_expression -> additive_expression .)
    EQ              reduce using rule 20 (relational_expression -> additive_expression .)
    NE              reduce using rule 20 (relational_expression -> additive_expression .)
    RPAREN          reduce using rule 20 (relational_expression -> additive_expression .)
    LAND            reduce using rule 20 (relational_expression -> additive_expression .)
    LOR             reduce using rule 20 (relational_expression -> additive_expression .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29

    additive_operators             shift and go to state 27

state 38

    (12) iteration_statement -> WHILE LPAREN logical_expression . RPAREN statement
    (17) logical_expression -> logical_expression . logical_operators equality_expression
    (27) logical_operators -> . LAND
    (28) logical_operators -> . LOR

    RPAREN          shift and go to state 56
    LAND            shift and go to state 46
    LOR             shift and go to state 47

    logical_operators              shift and go to state 45

state 39

    (13) iteration_statement -> DO statement WHILE . LPAREN logical_expression RPAREN SEMI

    LPAREN          shift and go to state 57


state 40

    (15) assignment_expression -> assignment_expression assignment_operators additive_expression .
    (23) additive_expression -> additive_expression . additive_operators multiplicative_expression
    (35) additive_operators -> . PLUS
    (36) additive_operators -> . MINUS

    EQUALS          reduce using rule 15 (assignment_expression -> assignment_expression assignment_operators additive_expression .)
    SEMI            reduce using rule 15 (assignment_expression -> assignment_expression assignment_operators additive_expression .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29

    additive_operators             shift and go to state 27

state 41

    (23) additive_expression -> additive_expression additive_operators multiplicative_expression .
    (25) multiplicative_expression -> multiplicative_expression . multiplicative_operators primary_expression
    (37) multiplicative_operators -> . TIMES
    (38) multiplicative_operators -> . DIVIDE

    PLUS            reduce using rule 23 (additive_expression -> additive_expression additive_operators multiplicative_expression .)
    MINUS           reduce using rule 23 (additive_expression -> additive_expression additive_operators multiplicative_expression .)
    EQUALS          reduce using rule 23 (additive_expression -> additive_expression additive_operators multiplicative_expression .)
    SEMI            reduce using rule 23 (additive_expression -> additive_expression additive_operators multiplicative_expression .)
    LT              reduce using rule 23 (additive_expression -> additive_expression additive_operators multiplicative_expression .)
    GT              reduce using rule 23 (additive_expression -> additive_expression additive_operators multiplicative_expression .)
    LE              reduce using rule 23 (additive_expression -> additive_expression additive_operators multiplicative_expression .)
    GE              reduce using rule 23 (additive_expression -> additive_expression additive_operators multiplicative_expression .)
    EQ              reduce using rule 23 (additive_expression -> additive_expression additive_operators multiplicative_expression .)
    NE              reduce using rule 23 (additive_expression -> additive_expression additive_operators multiplicative_expression .)
    RPAREN          reduce using rule 23 (additive_expression -> additive_expression additive_operators multiplicative_expression .)
    LAND            reduce using rule 23 (additive_expression -> additive_expression additive_operators multiplicative_expression .)
    LOR             reduce using rule 23 (additive_expression -> additive_expression additive_operators multiplicative_expression .)
    TIMES           shift and go to state 31
    DIVIDE          shift and go to state 32

    multiplicative_operators       shift and go to state 30

state 42

    (25) multiplicative_expression -> multiplicative_expression multiplicative_operators primary_expression .

    TIMES           reduce using rule 25 (multiplicative_expression -> multiplicative_expression multiplicative_operators primary_expression .)
    DIVIDE          reduce using rule 25 (multiplicative_expression -> multiplicative_expression multiplicative_operators primary_expression .)
    PLUS            reduce using rule 25 (multiplicative_expression -> multiplicative_expression multiplicative_operators primary_expression .)
    MINUS           reduce using rule 25 (multiplicative_expression -> multiplicative_expression multiplicative_operators primary_expression .)
    EQUALS          reduce using rule 25 (multiplicative_expression -> multiplicative_expression multiplicative_operators primary_expression .)
    SEMI            reduce using rule 25 (multiplicative_expression -> multiplicative_expression multiplicative_operators primary_expression .)
    LT              reduce using rule 25 (multiplicative_expression -> multiplicative_expression multiplicative_operators primary_expression .)
    GT              reduce using rule 25 (multiplicative_expression -> multiplicative_expression multiplicative_operators primary_expression .)
    LE              reduce using rule 25 (multiplicative_expression -> multiplicative_expression multiplicative_operators primary_expression .)
    GE              reduce using rule 25 (multiplicative_expression -> multiplicative_expression multiplicative_operators primary_expression .)
    EQ              reduce using rule 25 (multiplicative_expression -> multiplicative_expression multiplicative_operators primary_expression .)
    NE              reduce using rule 25 (multiplicative_expression -> multiplicative_expression multiplicative_operators primary_expression .)
    RPAREN          reduce using rule 25 (multiplicative_expression -> multiplicative_expression multiplicative_operators primary_expression .)
    LAND            reduce using rule 25 (multiplicative_expression -> multiplicative_expression multiplicative_operators primary_expression .)
    LOR             reduce using rule 25 (multiplicative_expression -> multiplicative_expression multiplicative_operators primary_expression .)


state 43

    (11) selection_statement -> selection_statement ELSE LBRACE statement . RBRACE

    RBRACE          shift and go to state 58


state 44

    (10) selection_statement -> IF LPAREN logical_expression RPAREN . LBRACE statement RBRACE

    LBRACE          shift and go to state 59


state 45

    (17) logical_expression -> logical_expression logical_operators . equality_expression
    (18) equality_expression -> . relational_expression
    (19) equality_expression -> . equality_expression equality_operators relational_expression
    (20) relational_expression -> . additive_expression
    (21) relational_expression -> . relational_expression relational_operators additive_expression
    (22) additive_expression -> . multiplicative_expression
    (23) additive_expression -> . additive_expression additive_operators multiplicative_expression
    (24) multiplicative_expression -> . primary_expression
    (25) multiplicative_expression -> . multiplicative_expression multiplicative_operators primary_expression
    (39) primary_expression -> . ID
    (40) primary_expression -> . DIGIT

    ID              shift and go to state 17
    DIGIT           shift and go to state 18

    equality_expression            shift and go to state 60
    relational_expression          shift and go to state 36
    additive_expression            shift and go to state 37
    multiplicative_expression      shift and go to state 15
    primary_expression             shift and go to state 16

state 46

    (27) logical_operators -> LAND .

    ID              reduce using rule 27 (logical_operators -> LAND .)
    DIGIT           reduce using rule 27 (logical_operators -> LAND .)


state 47

    (28) logical_operators -> LOR .

    ID              reduce using rule 28 (logical_operators -> LOR .)
    DIGIT           reduce using rule 28 (logical_operators -> LOR .)


state 48

    (19) equality_expression -> equality_expression equality_operators . relational_expression
    (20) relational_expression -> . additive_expression
    (21) relational_expression -> . relational_expression relational_operators additive_expression
    (22) additive_expression -> . multiplicative_expression
    (23) additive_expression -> . additive_expression additive_operators multiplicative_expression
    (24) multiplicative_expression -> . primary_expression
    (25) multiplicative_expression -> . multiplicative_expression multiplicative_operators primary_expression
    (39) primary_expression -> . ID
    (40) primary_expression -> . DIGIT

    ID              shift and go to state 17
    DIGIT           shift and go to state 18

    relational_expression          shift and go to state 61
    additive_expression            shift and go to state 37
    multiplicative_expression      shift and go to state 15
    primary_expression             shift and go to state 16

state 49

    (29) equality_operators -> EQ .

    ID              reduce using rule 29 (equality_operators -> EQ .)
    DIGIT           reduce using rule 29 (equality_operators -> EQ .)


state 50

    (30) equality_operators -> NE .

    ID              reduce using rule 30 (equality_operators -> NE .)
    DIGIT           reduce using rule 30 (equality_operators -> NE .)


state 51

    (21) relational_expression -> relational_expression relational_operators . additive_expression
    (22) additive_expression -> . multiplicative_expression
    (23) additive_expression -> . additive_expression additive_operators multiplicative_expression
    (24) multiplicative_expression -> . primary_expression
    (25) multiplicative_expression -> . multiplicative_expression multiplicative_operators primary_expression
    (39) primary_expression -> . ID
    (40) primary_expression -> . DIGIT

    ID              shift and go to state 17
    DIGIT           shift and go to state 18

    additive_expression            shift and go to state 62
    multiplicative_expression      shift and go to state 15
    primary_expression             shift and go to state 16

state 52

    (31) relational_operators -> LT .

    ID              reduce using rule 31 (relational_operators -> LT .)
    DIGIT           reduce using rule 31 (relational_operators -> LT .)


state 53

    (32) relational_operators -> GT .

    ID              reduce using rule 32 (relational_operators -> GT .)
    DIGIT           reduce using rule 32 (relational_operators -> GT .)


state 54

    (33) relational_operators -> LE .

    ID              reduce using rule 33 (relational_operators -> LE .)
    DIGIT           reduce using rule 33 (relational_operators -> LE .)


state 55

    (34) relational_operators -> GE .

    ID              reduce using rule 34 (relational_operators -> GE .)
    DIGIT           reduce using rule 34 (relational_operators -> GE .)


state 56

    (12) iteration_statement -> WHILE LPAREN logical_expression RPAREN . statement
    (1) statement -> . expression_statement
    (2) statement -> . selection_statement
    (3) statement -> . iteration_statement
    (7) expression_statement -> . declaration_expression SEMI
    (10) selection_statement -> . IF LPAREN logical_expression RPAREN LBRACE statement RBRACE
    (11) selection_statement -> . selection_statement ELSE LBRACE statement RBRACE
    (12) iteration_statement -> . WHILE LPAREN logical_expression RPAREN statement
    (13) iteration_statement -> . DO statement WHILE LPAREN logical_expression RPAREN SEMI
    (8) declaration_expression -> . assignment_expression
    (9) declaration_expression -> . type_specifier declaration_expression
    (14) assignment_expression -> . additive_expression
    (15) assignment_expression -> . assignment_expression assignment_operators additive_expression
    (4) type_specifier -> . INT
    (5) type_specifier -> . BOOL
    (6) type_specifier -> . STRING
    (22) additive_expression -> . multiplicative_expression
    (23) additive_expression -> . additive_expression additive_operators multiplicative_expression
    (24) multiplicative_expression -> . primary_expression
    (25) multiplicative_expression -> . multiplicative_expression multiplicative_operators primary_expression
    (39) primary_expression -> . ID
    (40) primary_expression -> . DIGIT

    IF              shift and go to state 6
    WHILE           shift and go to state 7
    DO              shift and go to state 8
    INT             shift and go to state 12
    BOOL            shift and go to state 13
    STRING          shift and go to state 14
    ID              shift and go to state 17
    DIGIT           shift and go to state 18

    statement                      shift and go to state 63
    expression_statement           shift and go to state 2
    selection_statement            shift and go to state 3
    iteration_statement            shift and go to state 4
    declaration_expression         shift and go to state 5
    assignment_expression          shift and go to state 9
    type_specifier                 shift and go to state 10
    additive_expression            shift and go to state 11
    multiplicative_expression      shift and go to state 15
    primary_expression             shift and go to state 16

state 57

    (13) iteration_statement -> DO statement WHILE LPAREN . logical_expression RPAREN SEMI
    (16) logical_expression -> . equality_expression
    (17) logical_expression -> . logical_expression logical_operators equality_expression
    (18) equality_expression -> . relational_expression
    (19) equality_expression -> . equality_expression equality_operators relational_expression
    (20) relational_expression -> . additive_expression
    (21) relational_expression -> . relational_expression relational_operators additive_expression
    (22) additive_expression -> . multiplicative_expression
    (23) additive_expression -> . additive_expression additive_operators multiplicative_expression
    (24) multiplicative_expression -> . primary_expression
    (25) multiplicative_expression -> . multiplicative_expression multiplicative_operators primary_expression
    (39) primary_expression -> . ID
    (40) primary_expression -> . DIGIT

    ID              shift and go to state 17
    DIGIT           shift and go to state 18

    logical_expression             shift and go to state 64
    equality_expression            shift and go to state 35
    relational_expression          shift and go to state 36
    additive_expression            shift and go to state 37
    multiplicative_expression      shift and go to state 15
    primary_expression             shift and go to state 16

state 58

    (11) selection_statement -> selection_statement ELSE LBRACE statement RBRACE .

    ELSE            reduce using rule 11 (selection_statement -> selection_statement ELSE LBRACE statement RBRACE .)
    $end            reduce using rule 11 (selection_statement -> selection_statement ELSE LBRACE statement RBRACE .)
    WHILE           reduce using rule 11 (selection_statement -> selection_statement ELSE LBRACE statement RBRACE .)
    RBRACE          reduce using rule 11 (selection_statement -> selection_statement ELSE LBRACE statement RBRACE .)


state 59

    (10) selection_statement -> IF LPAREN logical_expression RPAREN LBRACE . statement RBRACE
    (1) statement -> . expression_statement
    (2) statement -> . selection_statement
    (3) statement -> . iteration_statement
    (7) expression_statement -> . declaration_expression SEMI
    (10) selection_statement -> . IF LPAREN logical_expression RPAREN LBRACE statement RBRACE
    (11) selection_statement -> . selection_statement ELSE LBRACE statement RBRACE
    (12) iteration_statement -> . WHILE LPAREN logical_expression RPAREN statement
    (13) iteration_statement -> . DO statement WHILE LPAREN logical_expression RPAREN SEMI
    (8) declaration_expression -> . assignment_expression
    (9) declaration_expression -> . type_specifier declaration_expression
    (14) assignment_expression -> . additive_expression
    (15) assignment_expression -> . assignment_expression assignment_operators additive_expression
    (4) type_specifier -> . INT
    (5) type_specifier -> . BOOL
    (6) type_specifier -> . STRING
    (22) additive_expression -> . multiplicative_expression
    (23) additive_expression -> . additive_expression additive_operators multiplicative_expression
    (24) multiplicative_expression -> . primary_expression
    (25) multiplicative_expression -> . multiplicative_expression multiplicative_operators primary_expression
    (39) primary_expression -> . ID
    (40) primary_expression -> . DIGIT

    IF              shift and go to state 6
    WHILE           shift and go to state 7
    DO              shift and go to state 8
    INT             shift and go to state 12
    BOOL            shift and go to state 13
    STRING          shift and go to state 14
    ID              shift and go to state 17
    DIGIT           shift and go to state 18

    statement                      shift and go to state 65
    expression_statement           shift and go to state 2
    selection_statement            shift and go to state 3
    iteration_statement            shift and go to state 4
    declaration_expression         shift and go to state 5
    assignment_expression          shift and go to state 9
    type_specifier                 shift and go to state 10
    additive_expression            shift and go to state 11
    multiplicative_expression      shift and go to state 15
    primary_expression             shift and go to state 16

state 60

    (17) logical_expression -> logical_expression logical_operators equality_expression .
    (19) equality_expression -> equality_expression . equality_operators relational_expression
    (29) equality_operators -> . EQ
    (30) equality_operators -> . NE

    RPAREN          reduce using rule 17 (logical_expression -> logical_expression logical_operators equality_expression .)
    LAND            reduce using rule 17 (logical_expression -> logical_expression logical_operators equality_expression .)
    LOR             reduce using rule 17 (logical_expression -> logical_expression logical_operators equality_expression .)
    EQ              shift and go to state 49
    NE              shift and go to state 50

    equality_operators             shift and go to state 48

state 61

    (19) equality_expression -> equality_expression equality_operators relational_expression .
    (21) relational_expression -> relational_expression . relational_operators additive_expression
    (31) relational_operators -> . LT
    (32) relational_operators -> . GT
    (33) relational_operators -> . LE
    (34) relational_operators -> . GE

    EQ              reduce using rule 19 (equality_expression -> equality_expression equality_operators relational_expression .)
    NE              reduce using rule 19 (equality_expression -> equality_expression equality_operators relational_expression .)
    RPAREN          reduce using rule 19 (equality_expression -> equality_expression equality_operators relational_expression .)
    LAND            reduce using rule 19 (equality_expression -> equality_expression equality_operators relational_expression .)
    LOR             reduce using rule 19 (equality_expression -> equality_expression equality_operators relational_expression .)
    LT              shift and go to state 52
    GT              shift and go to state 53
    LE              shift and go to state 54
    GE              shift and go to state 55

    relational_operators           shift and go to state 51

state 62

    (21) relational_expression -> relational_expression relational_operators additive_expression .
    (23) additive_expression -> additive_expression . additive_operators multiplicative_expression
    (35) additive_operators -> . PLUS
    (36) additive_operators -> . MINUS

    LT              reduce using rule 21 (relational_expression -> relational_expression relational_operators additive_expression .)
    GT              reduce using rule 21 (relational_expression -> relational_expression relational_operators additive_expression .)
    LE              reduce using rule 21 (relational_expression -> relational_expression relational_operators additive_expression .)
    GE              reduce using rule 21 (relational_expression -> relational_expression relational_operators additive_expression .)
    EQ              reduce using rule 21 (relational_expression -> relational_expression relational_operators additive_expression .)
    NE              reduce using rule 21 (relational_expression -> relational_expression relational_operators additive_expression .)
    RPAREN          reduce using rule 21 (relational_expression -> relational_expression relational_operators additive_expression .)
    LAND            reduce using rule 21 (relational_expression -> relational_expression relational_operators additive_expression .)
    LOR             reduce using rule 21 (relational_expression -> relational_expression relational_operators additive_expression .)
    PLUS            shift and go to state 28
    MINUS           shift and go to state 29

    additive_operators             shift and go to state 27

state 63

    (12) iteration_statement -> WHILE LPAREN logical_expression RPAREN statement .

    $end            reduce using rule 12 (iteration_statement -> WHILE LPAREN logical_expression RPAREN statement .)
    WHILE           reduce using rule 12 (iteration_statement -> WHILE LPAREN logical_expression RPAREN statement .)
    RBRACE          reduce using rule 12 (iteration_statement -> WHILE LPAREN logical_expression RPAREN statement .)


state 64

    (13) iteration_statement -> DO statement WHILE LPAREN logical_expression . RPAREN SEMI
    (17) logical_expression -> logical_expression . logical_operators equality_expression
    (27) logical_operators -> . LAND
    (28) logical_operators -> . LOR

    RPAREN          shift and go to state 66
    LAND            shift and go to state 46
    LOR             shift and go to state 47

    logical_operators              shift and go to state 45

state 65

    (10) selection_statement -> IF LPAREN logical_expression RPAREN LBRACE statement . RBRACE

    RBRACE          shift and go to state 67


state 66

    (13) iteration_statement -> DO statement WHILE LPAREN logical_expression RPAREN . SEMI

    SEMI            shift and go to state 68


state 67

    (10) selection_statement -> IF LPAREN logical_expression RPAREN LBRACE statement RBRACE .

    ELSE            reduce using rule 10 (selection_statement -> IF LPAREN logical_expression RPAREN LBRACE statement RBRACE .)
    $end            reduce using rule 10 (selection_statement -> IF LPAREN logical_expression RPAREN LBRACE statement RBRACE .)
    WHILE           reduce using rule 10 (selection_statement -> IF LPAREN logical_expression RPAREN LBRACE statement RBRACE .)
    RBRACE          reduce using rule 10 (selection_statement -> IF LPAREN logical_expression RPAREN LBRACE statement RBRACE .)


state 68

    (13) iteration_statement -> DO statement WHILE LPAREN logical_expression RPAREN SEMI .

    $end            reduce using rule 13 (iteration_statement -> DO statement WHILE LPAREN logical_expression RPAREN SEMI .)
    WHILE           reduce using rule 13 (iteration_statement -> DO statement WHILE LPAREN logical_expression RPAREN SEMI .)
    RBRACE          reduce using rule 13 (iteration_statement -> DO statement WHILE LPAREN logical_expression RPAREN SEMI .)

