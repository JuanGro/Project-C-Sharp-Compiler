Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement_list
Rule 1     statement_list -> empty
Rule 2     statement_list -> statement_list statement
Rule 3     statement -> expression_statement
Rule 4     statement -> selection_statement
Rule 5     statement -> iteration_statement
Rule 6     expression_statement -> declaration_expression SEMI
Rule 7     expression_statement -> output_expression SEMI
Rule 8     expression_statement -> input_expression SEMI
Rule 9     expression_statement -> empty SEMI
Rule 10    declaration_expression -> assignment_expression
Rule 11    declaration_expression -> type_specifier declaration_expression
Rule 12    selection_statement -> IF conditional_expression block_statement_list
Rule 13    selection_statement -> selection_statement ELSE block_statement_list
Rule 14    iteration_statement -> WHILE conditional_expression block_statement_list
Rule 15    iteration_statement -> DO block_statement_list WHILE conditional_expression SEMI
Rule 16    block_statement_list -> LBRACE statement_list RBRACE
Rule 17    conditional_expression -> LPAREN logical_expression RPAREN
Rule 18    assignment_expression -> variable_expression
Rule 19    assignment_expression -> assignment_expression EQUALS logical_expression
Rule 20    assignment_expression -> assignment_expression EQUALS input_expression
Rule 21    logical_expression -> equality_expression
Rule 22    logical_expression -> logical_expression logical_operators equality_expression
Rule 23    equality_expression -> relational_expression
Rule 24    equality_expression -> equality_expression equality_operators relational_expression
Rule 25    relational_expression -> math_expression
Rule 26    relational_expression -> relational_expression relational_operators math_expression
Rule 27    math_expression -> primary_expression
Rule 28    math_expression -> math_expression math_operators primary_expression
Rule 29    input_expression -> CONSOLE DOT READLINE
Rule 30    output_expression -> CONSOLE DOT WRITELINE conditional_expression
Rule 31    type_specifier -> INT
Rule 32    type_specifier -> BOOL
Rule 33    type_specifier -> STRING
Rule 34    logical_operators -> LAND
Rule 35    logical_operators -> LOR
Rule 36    equality_operators -> EQ
Rule 37    equality_operators -> NE
Rule 38    relational_operators -> LT
Rule 39    relational_operators -> GT
Rule 40    relational_operators -> LE
Rule 41    relational_operators -> GE
Rule 42    math_operators -> PLUS
Rule 43    math_operators -> MINUS
Rule 44    math_operators -> TIMES
Rule 45    math_operators -> DIVIDE
Rule 46    primary_expression -> variable_expression
Rule 47    primary_expression -> DIGIT
Rule 48    primary_expression -> STRING_SENTENCE
Rule 49    variable_expression -> ID
Rule 50    variable_expression -> CONSTANT
Rule 51    empty -> <empty>

Terminals, with rules where they appear

BOOL                 : 32
CONSOLE              : 29 30
CONSTANT             : 50
DIGIT                : 47
DIVIDE               : 45
DO                   : 15
DOT                  : 29 30
ELSE                 : 13
EQ                   : 36
EQUALS               : 19 20
GE                   : 41
GT                   : 39
ID                   : 49
IF                   : 12
INT                  : 31
LAND                 : 34
LBRACE               : 16
LE                   : 40
LOR                  : 35
LPAREN               : 17
LT                   : 38
MINUS                : 43
NE                   : 37
PLUS                 : 42
RBRACE               : 16
READLINE             : 29
RPAREN               : 17
SEMI                 : 6 7 8 9 15
STRING               : 33
STRING_SENTENCE      : 48
TIMES                : 44
WHILE                : 14 15
WRITELINE            : 30
error                : 

Nonterminals, with rules where they appear

assignment_expression : 10 19 20
block_statement_list : 12 13 14 15
conditional_expression : 12 14 15 30
declaration_expression : 6 11
empty                : 1 9
equality_expression  : 21 22 24
equality_operators   : 24
expression_statement : 3
input_expression     : 8 20
iteration_statement  : 5
logical_expression   : 17 19 22
logical_operators    : 22
math_expression      : 25 26 28
math_operators       : 28
output_expression    : 7
primary_expression   : 27 28
relational_expression : 23 24 26
relational_operators : 26
selection_statement  : 4 13
statement            : 2
statement_list       : 2 16 0
type_specifier       : 11
variable_expression  : 18 46

Parsing method: LALR

state 0

    (0) S' -> . statement_list
    (1) statement_list -> . empty
    (2) statement_list -> . statement_list statement
    (51) empty -> .

    IF              reduce using rule 51 (empty -> .)
    WHILE           reduce using rule 51 (empty -> .)
    DO              reduce using rule 51 (empty -> .)
    CONSOLE         reduce using rule 51 (empty -> .)
    INT             reduce using rule 51 (empty -> .)
    BOOL            reduce using rule 51 (empty -> .)
    STRING          reduce using rule 51 (empty -> .)
    ID              reduce using rule 51 (empty -> .)
    CONSTANT        reduce using rule 51 (empty -> .)
    $end            reduce using rule 51 (empty -> .)
    SEMI            reduce using rule 51 (empty -> .)

    statement_list                 shift and go to state 1
    empty                          shift and go to state 2

state 1

    (0) S' -> statement_list .
    (2) statement_list -> statement_list . statement
    (3) statement -> . expression_statement
    (4) statement -> . selection_statement
    (5) statement -> . iteration_statement
    (6) expression_statement -> . declaration_expression SEMI
    (7) expression_statement -> . output_expression SEMI
    (8) expression_statement -> . input_expression SEMI
    (9) expression_statement -> . empty SEMI
    (12) selection_statement -> . IF conditional_expression block_statement_list
    (13) selection_statement -> . selection_statement ELSE block_statement_list
    (14) iteration_statement -> . WHILE conditional_expression block_statement_list
    (15) iteration_statement -> . DO block_statement_list WHILE conditional_expression SEMI
    (10) declaration_expression -> . assignment_expression
    (11) declaration_expression -> . type_specifier declaration_expression
    (30) output_expression -> . CONSOLE DOT WRITELINE conditional_expression
    (29) input_expression -> . CONSOLE DOT READLINE
    (51) empty -> .
    (18) assignment_expression -> . variable_expression
    (19) assignment_expression -> . assignment_expression EQUALS logical_expression
    (20) assignment_expression -> . assignment_expression EQUALS input_expression
    (31) type_specifier -> . INT
    (32) type_specifier -> . BOOL
    (33) type_specifier -> . STRING
    (49) variable_expression -> . ID
    (50) variable_expression -> . CONSTANT

    IF              shift and go to state 11
    WHILE           shift and go to state 12
    DO              shift and go to state 13
    CONSOLE         shift and go to state 16
    SEMI            reduce using rule 51 (empty -> .)
    INT             shift and go to state 18
    BOOL            shift and go to state 19
    STRING          shift and go to state 20
    ID              shift and go to state 21
    CONSTANT        shift and go to state 22

    statement                      shift and go to state 3
    expression_statement           shift and go to state 4
    selection_statement            shift and go to state 5
    iteration_statement            shift and go to state 6
    declaration_expression         shift and go to state 7
    output_expression              shift and go to state 8
    input_expression               shift and go to state 9
    empty                          shift and go to state 10
    assignment_expression          shift and go to state 14
    type_specifier                 shift and go to state 15
    variable_expression            shift and go to state 17

state 2

    (1) statement_list -> empty .

    IF              reduce using rule 1 (statement_list -> empty .)
    WHILE           reduce using rule 1 (statement_list -> empty .)
    DO              reduce using rule 1 (statement_list -> empty .)
    CONSOLE         reduce using rule 1 (statement_list -> empty .)
    INT             reduce using rule 1 (statement_list -> empty .)
    BOOL            reduce using rule 1 (statement_list -> empty .)
    STRING          reduce using rule 1 (statement_list -> empty .)
    ID              reduce using rule 1 (statement_list -> empty .)
    CONSTANT        reduce using rule 1 (statement_list -> empty .)
    $end            reduce using rule 1 (statement_list -> empty .)
    SEMI            reduce using rule 1 (statement_list -> empty .)
    RBRACE          reduce using rule 1 (statement_list -> empty .)


state 3

    (2) statement_list -> statement_list statement .

    IF              reduce using rule 2 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 2 (statement_list -> statement_list statement .)
    DO              reduce using rule 2 (statement_list -> statement_list statement .)
    CONSOLE         reduce using rule 2 (statement_list -> statement_list statement .)
    INT             reduce using rule 2 (statement_list -> statement_list statement .)
    BOOL            reduce using rule 2 (statement_list -> statement_list statement .)
    STRING          reduce using rule 2 (statement_list -> statement_list statement .)
    ID              reduce using rule 2 (statement_list -> statement_list statement .)
    CONSTANT        reduce using rule 2 (statement_list -> statement_list statement .)
    $end            reduce using rule 2 (statement_list -> statement_list statement .)
    SEMI            reduce using rule 2 (statement_list -> statement_list statement .)
    RBRACE          reduce using rule 2 (statement_list -> statement_list statement .)


state 4

    (3) statement -> expression_statement .

    IF              reduce using rule 3 (statement -> expression_statement .)
    WHILE           reduce using rule 3 (statement -> expression_statement .)
    DO              reduce using rule 3 (statement -> expression_statement .)
    CONSOLE         reduce using rule 3 (statement -> expression_statement .)
    INT             reduce using rule 3 (statement -> expression_statement .)
    BOOL            reduce using rule 3 (statement -> expression_statement .)
    STRING          reduce using rule 3 (statement -> expression_statement .)
    ID              reduce using rule 3 (statement -> expression_statement .)
    CONSTANT        reduce using rule 3 (statement -> expression_statement .)
    $end            reduce using rule 3 (statement -> expression_statement .)
    SEMI            reduce using rule 3 (statement -> expression_statement .)
    RBRACE          reduce using rule 3 (statement -> expression_statement .)


state 5

    (4) statement -> selection_statement .
    (13) selection_statement -> selection_statement . ELSE block_statement_list

    IF              reduce using rule 4 (statement -> selection_statement .)
    WHILE           reduce using rule 4 (statement -> selection_statement .)
    DO              reduce using rule 4 (statement -> selection_statement .)
    CONSOLE         reduce using rule 4 (statement -> selection_statement .)
    INT             reduce using rule 4 (statement -> selection_statement .)
    BOOL            reduce using rule 4 (statement -> selection_statement .)
    STRING          reduce using rule 4 (statement -> selection_statement .)
    ID              reduce using rule 4 (statement -> selection_statement .)
    CONSTANT        reduce using rule 4 (statement -> selection_statement .)
    $end            reduce using rule 4 (statement -> selection_statement .)
    SEMI            reduce using rule 4 (statement -> selection_statement .)
    RBRACE          reduce using rule 4 (statement -> selection_statement .)
    ELSE            shift and go to state 23


state 6

    (5) statement -> iteration_statement .

    IF              reduce using rule 5 (statement -> iteration_statement .)
    WHILE           reduce using rule 5 (statement -> iteration_statement .)
    DO              reduce using rule 5 (statement -> iteration_statement .)
    CONSOLE         reduce using rule 5 (statement -> iteration_statement .)
    INT             reduce using rule 5 (statement -> iteration_statement .)
    BOOL            reduce using rule 5 (statement -> iteration_statement .)
    STRING          reduce using rule 5 (statement -> iteration_statement .)
    ID              reduce using rule 5 (statement -> iteration_statement .)
    CONSTANT        reduce using rule 5 (statement -> iteration_statement .)
    $end            reduce using rule 5 (statement -> iteration_statement .)
    SEMI            reduce using rule 5 (statement -> iteration_statement .)
    RBRACE          reduce using rule 5 (statement -> iteration_statement .)


state 7

    (6) expression_statement -> declaration_expression . SEMI

    SEMI            shift and go to state 24


state 8

    (7) expression_statement -> output_expression . SEMI

    SEMI            shift and go to state 25


state 9

    (8) expression_statement -> input_expression . SEMI

    SEMI            shift and go to state 26


state 10

    (9) expression_statement -> empty . SEMI

    SEMI            shift and go to state 27


state 11

    (12) selection_statement -> IF . conditional_expression block_statement_list
    (17) conditional_expression -> . LPAREN logical_expression RPAREN

    LPAREN          shift and go to state 29

    conditional_expression         shift and go to state 28

state 12

    (14) iteration_statement -> WHILE . conditional_expression block_statement_list
    (17) conditional_expression -> . LPAREN logical_expression RPAREN

    LPAREN          shift and go to state 29

    conditional_expression         shift and go to state 30

state 13

    (15) iteration_statement -> DO . block_statement_list WHILE conditional_expression SEMI
    (16) block_statement_list -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 32

    block_statement_list           shift and go to state 31

state 14

    (10) declaration_expression -> assignment_expression .
    (19) assignment_expression -> assignment_expression . EQUALS logical_expression
    (20) assignment_expression -> assignment_expression . EQUALS input_expression

    SEMI            reduce using rule 10 (declaration_expression -> assignment_expression .)
    EQUALS          shift and go to state 33


state 15

    (11) declaration_expression -> type_specifier . declaration_expression
    (10) declaration_expression -> . assignment_expression
    (11) declaration_expression -> . type_specifier declaration_expression
    (18) assignment_expression -> . variable_expression
    (19) assignment_expression -> . assignment_expression EQUALS logical_expression
    (20) assignment_expression -> . assignment_expression EQUALS input_expression
    (31) type_specifier -> . INT
    (32) type_specifier -> . BOOL
    (33) type_specifier -> . STRING
    (49) variable_expression -> . ID
    (50) variable_expression -> . CONSTANT

    INT             shift and go to state 18
    BOOL            shift and go to state 19
    STRING          shift and go to state 20
    ID              shift and go to state 21
    CONSTANT        shift and go to state 22

    type_specifier                 shift and go to state 15
    declaration_expression         shift and go to state 34
    assignment_expression          shift and go to state 14
    variable_expression            shift and go to state 17

state 16

    (30) output_expression -> CONSOLE . DOT WRITELINE conditional_expression
    (29) input_expression -> CONSOLE . DOT READLINE

    DOT             shift and go to state 35


state 17

    (18) assignment_expression -> variable_expression .

    EQUALS          reduce using rule 18 (assignment_expression -> variable_expression .)
    SEMI            reduce using rule 18 (assignment_expression -> variable_expression .)


state 18

    (31) type_specifier -> INT .

    INT             reduce using rule 31 (type_specifier -> INT .)
    BOOL            reduce using rule 31 (type_specifier -> INT .)
    STRING          reduce using rule 31 (type_specifier -> INT .)
    ID              reduce using rule 31 (type_specifier -> INT .)
    CONSTANT        reduce using rule 31 (type_specifier -> INT .)


state 19

    (32) type_specifier -> BOOL .

    INT             reduce using rule 32 (type_specifier -> BOOL .)
    BOOL            reduce using rule 32 (type_specifier -> BOOL .)
    STRING          reduce using rule 32 (type_specifier -> BOOL .)
    ID              reduce using rule 32 (type_specifier -> BOOL .)
    CONSTANT        reduce using rule 32 (type_specifier -> BOOL .)


state 20

    (33) type_specifier -> STRING .

    INT             reduce using rule 33 (type_specifier -> STRING .)
    BOOL            reduce using rule 33 (type_specifier -> STRING .)
    STRING          reduce using rule 33 (type_specifier -> STRING .)
    ID              reduce using rule 33 (type_specifier -> STRING .)
    CONSTANT        reduce using rule 33 (type_specifier -> STRING .)


state 21

    (49) variable_expression -> ID .

    EQUALS          reduce using rule 49 (variable_expression -> ID .)
    SEMI            reduce using rule 49 (variable_expression -> ID .)
    PLUS            reduce using rule 49 (variable_expression -> ID .)
    MINUS           reduce using rule 49 (variable_expression -> ID .)
    TIMES           reduce using rule 49 (variable_expression -> ID .)
    DIVIDE          reduce using rule 49 (variable_expression -> ID .)
    LT              reduce using rule 49 (variable_expression -> ID .)
    GT              reduce using rule 49 (variable_expression -> ID .)
    LE              reduce using rule 49 (variable_expression -> ID .)
    GE              reduce using rule 49 (variable_expression -> ID .)
    EQ              reduce using rule 49 (variable_expression -> ID .)
    NE              reduce using rule 49 (variable_expression -> ID .)
    RPAREN          reduce using rule 49 (variable_expression -> ID .)
    LAND            reduce using rule 49 (variable_expression -> ID .)
    LOR             reduce using rule 49 (variable_expression -> ID .)


state 22

    (50) variable_expression -> CONSTANT .

    EQUALS          reduce using rule 50 (variable_expression -> CONSTANT .)
    SEMI            reduce using rule 50 (variable_expression -> CONSTANT .)
    PLUS            reduce using rule 50 (variable_expression -> CONSTANT .)
    MINUS           reduce using rule 50 (variable_expression -> CONSTANT .)
    TIMES           reduce using rule 50 (variable_expression -> CONSTANT .)
    DIVIDE          reduce using rule 50 (variable_expression -> CONSTANT .)
    LT              reduce using rule 50 (variable_expression -> CONSTANT .)
    GT              reduce using rule 50 (variable_expression -> CONSTANT .)
    LE              reduce using rule 50 (variable_expression -> CONSTANT .)
    GE              reduce using rule 50 (variable_expression -> CONSTANT .)
    EQ              reduce using rule 50 (variable_expression -> CONSTANT .)
    NE              reduce using rule 50 (variable_expression -> CONSTANT .)
    RPAREN          reduce using rule 50 (variable_expression -> CONSTANT .)
    LAND            reduce using rule 50 (variable_expression -> CONSTANT .)
    LOR             reduce using rule 50 (variable_expression -> CONSTANT .)


state 23

    (13) selection_statement -> selection_statement ELSE . block_statement_list
    (16) block_statement_list -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 32

    block_statement_list           shift and go to state 36

state 24

    (6) expression_statement -> declaration_expression SEMI .

    IF              reduce using rule 6 (expression_statement -> declaration_expression SEMI .)
    WHILE           reduce using rule 6 (expression_statement -> declaration_expression SEMI .)
    DO              reduce using rule 6 (expression_statement -> declaration_expression SEMI .)
    CONSOLE         reduce using rule 6 (expression_statement -> declaration_expression SEMI .)
    INT             reduce using rule 6 (expression_statement -> declaration_expression SEMI .)
    BOOL            reduce using rule 6 (expression_statement -> declaration_expression SEMI .)
    STRING          reduce using rule 6 (expression_statement -> declaration_expression SEMI .)
    ID              reduce using rule 6 (expression_statement -> declaration_expression SEMI .)
    CONSTANT        reduce using rule 6 (expression_statement -> declaration_expression SEMI .)
    $end            reduce using rule 6 (expression_statement -> declaration_expression SEMI .)
    SEMI            reduce using rule 6 (expression_statement -> declaration_expression SEMI .)
    RBRACE          reduce using rule 6 (expression_statement -> declaration_expression SEMI .)


state 25

    (7) expression_statement -> output_expression SEMI .

    IF              reduce using rule 7 (expression_statement -> output_expression SEMI .)
    WHILE           reduce using rule 7 (expression_statement -> output_expression SEMI .)
    DO              reduce using rule 7 (expression_statement -> output_expression SEMI .)
    CONSOLE         reduce using rule 7 (expression_statement -> output_expression SEMI .)
    INT             reduce using rule 7 (expression_statement -> output_expression SEMI .)
    BOOL            reduce using rule 7 (expression_statement -> output_expression SEMI .)
    STRING          reduce using rule 7 (expression_statement -> output_expression SEMI .)
    ID              reduce using rule 7 (expression_statement -> output_expression SEMI .)
    CONSTANT        reduce using rule 7 (expression_statement -> output_expression SEMI .)
    $end            reduce using rule 7 (expression_statement -> output_expression SEMI .)
    SEMI            reduce using rule 7 (expression_statement -> output_expression SEMI .)
    RBRACE          reduce using rule 7 (expression_statement -> output_expression SEMI .)


state 26

    (8) expression_statement -> input_expression SEMI .

    IF              reduce using rule 8 (expression_statement -> input_expression SEMI .)
    WHILE           reduce using rule 8 (expression_statement -> input_expression SEMI .)
    DO              reduce using rule 8 (expression_statement -> input_expression SEMI .)
    CONSOLE         reduce using rule 8 (expression_statement -> input_expression SEMI .)
    INT             reduce using rule 8 (expression_statement -> input_expression SEMI .)
    BOOL            reduce using rule 8 (expression_statement -> input_expression SEMI .)
    STRING          reduce using rule 8 (expression_statement -> input_expression SEMI .)
    ID              reduce using rule 8 (expression_statement -> input_expression SEMI .)
    CONSTANT        reduce using rule 8 (expression_statement -> input_expression SEMI .)
    $end            reduce using rule 8 (expression_statement -> input_expression SEMI .)
    SEMI            reduce using rule 8 (expression_statement -> input_expression SEMI .)
    RBRACE          reduce using rule 8 (expression_statement -> input_expression SEMI .)


state 27

    (9) expression_statement -> empty SEMI .

    IF              reduce using rule 9 (expression_statement -> empty SEMI .)
    WHILE           reduce using rule 9 (expression_statement -> empty SEMI .)
    DO              reduce using rule 9 (expression_statement -> empty SEMI .)
    CONSOLE         reduce using rule 9 (expression_statement -> empty SEMI .)
    INT             reduce using rule 9 (expression_statement -> empty SEMI .)
    BOOL            reduce using rule 9 (expression_statement -> empty SEMI .)
    STRING          reduce using rule 9 (expression_statement -> empty SEMI .)
    ID              reduce using rule 9 (expression_statement -> empty SEMI .)
    CONSTANT        reduce using rule 9 (expression_statement -> empty SEMI .)
    $end            reduce using rule 9 (expression_statement -> empty SEMI .)
    SEMI            reduce using rule 9 (expression_statement -> empty SEMI .)
    RBRACE          reduce using rule 9 (expression_statement -> empty SEMI .)


state 28

    (12) selection_statement -> IF conditional_expression . block_statement_list
    (16) block_statement_list -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 32

    block_statement_list           shift and go to state 37

state 29

    (17) conditional_expression -> LPAREN . logical_expression RPAREN
    (21) logical_expression -> . equality_expression
    (22) logical_expression -> . logical_expression logical_operators equality_expression
    (23) equality_expression -> . relational_expression
    (24) equality_expression -> . equality_expression equality_operators relational_expression
    (25) relational_expression -> . math_expression
    (26) relational_expression -> . relational_expression relational_operators math_expression
    (27) math_expression -> . primary_expression
    (28) math_expression -> . math_expression math_operators primary_expression
    (46) primary_expression -> . variable_expression
    (47) primary_expression -> . DIGIT
    (48) primary_expression -> . STRING_SENTENCE
    (49) variable_expression -> . ID
    (50) variable_expression -> . CONSTANT

    DIGIT           shift and go to state 44
    STRING_SENTENCE shift and go to state 45
    ID              shift and go to state 21
    CONSTANT        shift and go to state 22

    logical_expression             shift and go to state 38
    equality_expression            shift and go to state 39
    relational_expression          shift and go to state 40
    math_expression                shift and go to state 41
    primary_expression             shift and go to state 42
    variable_expression            shift and go to state 43

state 30

    (14) iteration_statement -> WHILE conditional_expression . block_statement_list
    (16) block_statement_list -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 32

    block_statement_list           shift and go to state 46

state 31

    (15) iteration_statement -> DO block_statement_list . WHILE conditional_expression SEMI

    WHILE           shift and go to state 47


state 32

    (16) block_statement_list -> LBRACE . statement_list RBRACE
    (1) statement_list -> . empty
    (2) statement_list -> . statement_list statement
    (51) empty -> .

    RBRACE          reduce using rule 51 (empty -> .)
    IF              reduce using rule 51 (empty -> .)
    WHILE           reduce using rule 51 (empty -> .)
    DO              reduce using rule 51 (empty -> .)
    CONSOLE         reduce using rule 51 (empty -> .)
    INT             reduce using rule 51 (empty -> .)
    BOOL            reduce using rule 51 (empty -> .)
    STRING          reduce using rule 51 (empty -> .)
    ID              reduce using rule 51 (empty -> .)
    CONSTANT        reduce using rule 51 (empty -> .)
    SEMI            reduce using rule 51 (empty -> .)

    statement_list                 shift and go to state 48
    empty                          shift and go to state 2

state 33

    (19) assignment_expression -> assignment_expression EQUALS . logical_expression
    (20) assignment_expression -> assignment_expression EQUALS . input_expression
    (21) logical_expression -> . equality_expression
    (22) logical_expression -> . logical_expression logical_operators equality_expression
    (29) input_expression -> . CONSOLE DOT READLINE
    (23) equality_expression -> . relational_expression
    (24) equality_expression -> . equality_expression equality_operators relational_expression
    (25) relational_expression -> . math_expression
    (26) relational_expression -> . relational_expression relational_operators math_expression
    (27) math_expression -> . primary_expression
    (28) math_expression -> . math_expression math_operators primary_expression
    (46) primary_expression -> . variable_expression
    (47) primary_expression -> . DIGIT
    (48) primary_expression -> . STRING_SENTENCE
    (49) variable_expression -> . ID
    (50) variable_expression -> . CONSTANT

    CONSOLE         shift and go to state 51
    DIGIT           shift and go to state 44
    STRING_SENTENCE shift and go to state 45
    ID              shift and go to state 21
    CONSTANT        shift and go to state 22

    logical_expression             shift and go to state 49
    input_expression               shift and go to state 50
    equality_expression            shift and go to state 39
    relational_expression          shift and go to state 40
    math_expression                shift and go to state 41
    primary_expression             shift and go to state 42
    variable_expression            shift and go to state 43

state 34

    (11) declaration_expression -> type_specifier declaration_expression .

    SEMI            reduce using rule 11 (declaration_expression -> type_specifier declaration_expression .)


state 35

    (30) output_expression -> CONSOLE DOT . WRITELINE conditional_expression
    (29) input_expression -> CONSOLE DOT . READLINE

    WRITELINE       shift and go to state 52
    READLINE        shift and go to state 53


state 36

    (13) selection_statement -> selection_statement ELSE block_statement_list .

    ELSE            reduce using rule 13 (selection_statement -> selection_statement ELSE block_statement_list .)
    IF              reduce using rule 13 (selection_statement -> selection_statement ELSE block_statement_list .)
    WHILE           reduce using rule 13 (selection_statement -> selection_statement ELSE block_statement_list .)
    DO              reduce using rule 13 (selection_statement -> selection_statement ELSE block_statement_list .)
    CONSOLE         reduce using rule 13 (selection_statement -> selection_statement ELSE block_statement_list .)
    INT             reduce using rule 13 (selection_statement -> selection_statement ELSE block_statement_list .)
    BOOL            reduce using rule 13 (selection_statement -> selection_statement ELSE block_statement_list .)
    STRING          reduce using rule 13 (selection_statement -> selection_statement ELSE block_statement_list .)
    ID              reduce using rule 13 (selection_statement -> selection_statement ELSE block_statement_list .)
    CONSTANT        reduce using rule 13 (selection_statement -> selection_statement ELSE block_statement_list .)
    $end            reduce using rule 13 (selection_statement -> selection_statement ELSE block_statement_list .)
    SEMI            reduce using rule 13 (selection_statement -> selection_statement ELSE block_statement_list .)
    RBRACE          reduce using rule 13 (selection_statement -> selection_statement ELSE block_statement_list .)


state 37

    (12) selection_statement -> IF conditional_expression block_statement_list .

    ELSE            reduce using rule 12 (selection_statement -> IF conditional_expression block_statement_list .)
    IF              reduce using rule 12 (selection_statement -> IF conditional_expression block_statement_list .)
    WHILE           reduce using rule 12 (selection_statement -> IF conditional_expression block_statement_list .)
    DO              reduce using rule 12 (selection_statement -> IF conditional_expression block_statement_list .)
    CONSOLE         reduce using rule 12 (selection_statement -> IF conditional_expression block_statement_list .)
    INT             reduce using rule 12 (selection_statement -> IF conditional_expression block_statement_list .)
    BOOL            reduce using rule 12 (selection_statement -> IF conditional_expression block_statement_list .)
    STRING          reduce using rule 12 (selection_statement -> IF conditional_expression block_statement_list .)
    ID              reduce using rule 12 (selection_statement -> IF conditional_expression block_statement_list .)
    CONSTANT        reduce using rule 12 (selection_statement -> IF conditional_expression block_statement_list .)
    $end            reduce using rule 12 (selection_statement -> IF conditional_expression block_statement_list .)
    SEMI            reduce using rule 12 (selection_statement -> IF conditional_expression block_statement_list .)
    RBRACE          reduce using rule 12 (selection_statement -> IF conditional_expression block_statement_list .)


state 38

    (17) conditional_expression -> LPAREN logical_expression . RPAREN
    (22) logical_expression -> logical_expression . logical_operators equality_expression
    (34) logical_operators -> . LAND
    (35) logical_operators -> . LOR

    RPAREN          shift and go to state 54
    LAND            shift and go to state 56
    LOR             shift and go to state 57

    logical_operators              shift and go to state 55

state 39

    (21) logical_expression -> equality_expression .
    (24) equality_expression -> equality_expression . equality_operators relational_expression
    (36) equality_operators -> . EQ
    (37) equality_operators -> . NE

    RPAREN          reduce using rule 21 (logical_expression -> equality_expression .)
    LAND            reduce using rule 21 (logical_expression -> equality_expression .)
    LOR             reduce using rule 21 (logical_expression -> equality_expression .)
    EQUALS          reduce using rule 21 (logical_expression -> equality_expression .)
    SEMI            reduce using rule 21 (logical_expression -> equality_expression .)
    EQ              shift and go to state 59
    NE              shift and go to state 60

    equality_operators             shift and go to state 58

state 40

    (23) equality_expression -> relational_expression .
    (26) relational_expression -> relational_expression . relational_operators math_expression
    (38) relational_operators -> . LT
    (39) relational_operators -> . GT
    (40) relational_operators -> . LE
    (41) relational_operators -> . GE

    EQ              reduce using rule 23 (equality_expression -> relational_expression .)
    NE              reduce using rule 23 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 23 (equality_expression -> relational_expression .)
    LAND            reduce using rule 23 (equality_expression -> relational_expression .)
    LOR             reduce using rule 23 (equality_expression -> relational_expression .)
    EQUALS          reduce using rule 23 (equality_expression -> relational_expression .)
    SEMI            reduce using rule 23 (equality_expression -> relational_expression .)
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65

    relational_operators           shift and go to state 61

state 41

    (25) relational_expression -> math_expression .
    (28) math_expression -> math_expression . math_operators primary_expression
    (42) math_operators -> . PLUS
    (43) math_operators -> . MINUS
    (44) math_operators -> . TIMES
    (45) math_operators -> . DIVIDE

    LT              reduce using rule 25 (relational_expression -> math_expression .)
    GT              reduce using rule 25 (relational_expression -> math_expression .)
    LE              reduce using rule 25 (relational_expression -> math_expression .)
    GE              reduce using rule 25 (relational_expression -> math_expression .)
    EQ              reduce using rule 25 (relational_expression -> math_expression .)
    NE              reduce using rule 25 (relational_expression -> math_expression .)
    RPAREN          reduce using rule 25 (relational_expression -> math_expression .)
    LAND            reduce using rule 25 (relational_expression -> math_expression .)
    LOR             reduce using rule 25 (relational_expression -> math_expression .)
    EQUALS          reduce using rule 25 (relational_expression -> math_expression .)
    SEMI            reduce using rule 25 (relational_expression -> math_expression .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70

    math_operators                 shift and go to state 66

state 42

    (27) math_expression -> primary_expression .

    PLUS            reduce using rule 27 (math_expression -> primary_expression .)
    MINUS           reduce using rule 27 (math_expression -> primary_expression .)
    TIMES           reduce using rule 27 (math_expression -> primary_expression .)
    DIVIDE          reduce using rule 27 (math_expression -> primary_expression .)
    LT              reduce using rule 27 (math_expression -> primary_expression .)
    GT              reduce using rule 27 (math_expression -> primary_expression .)
    LE              reduce using rule 27 (math_expression -> primary_expression .)
    GE              reduce using rule 27 (math_expression -> primary_expression .)
    EQ              reduce using rule 27 (math_expression -> primary_expression .)
    NE              reduce using rule 27 (math_expression -> primary_expression .)
    RPAREN          reduce using rule 27 (math_expression -> primary_expression .)
    LAND            reduce using rule 27 (math_expression -> primary_expression .)
    LOR             reduce using rule 27 (math_expression -> primary_expression .)
    EQUALS          reduce using rule 27 (math_expression -> primary_expression .)
    SEMI            reduce using rule 27 (math_expression -> primary_expression .)


state 43

    (46) primary_expression -> variable_expression .

    PLUS            reduce using rule 46 (primary_expression -> variable_expression .)
    MINUS           reduce using rule 46 (primary_expression -> variable_expression .)
    TIMES           reduce using rule 46 (primary_expression -> variable_expression .)
    DIVIDE          reduce using rule 46 (primary_expression -> variable_expression .)
    LT              reduce using rule 46 (primary_expression -> variable_expression .)
    GT              reduce using rule 46 (primary_expression -> variable_expression .)
    LE              reduce using rule 46 (primary_expression -> variable_expression .)
    GE              reduce using rule 46 (primary_expression -> variable_expression .)
    EQ              reduce using rule 46 (primary_expression -> variable_expression .)
    NE              reduce using rule 46 (primary_expression -> variable_expression .)
    RPAREN          reduce using rule 46 (primary_expression -> variable_expression .)
    LAND            reduce using rule 46 (primary_expression -> variable_expression .)
    LOR             reduce using rule 46 (primary_expression -> variable_expression .)
    EQUALS          reduce using rule 46 (primary_expression -> variable_expression .)
    SEMI            reduce using rule 46 (primary_expression -> variable_expression .)


state 44

    (47) primary_expression -> DIGIT .

    PLUS            reduce using rule 47 (primary_expression -> DIGIT .)
    MINUS           reduce using rule 47 (primary_expression -> DIGIT .)
    TIMES           reduce using rule 47 (primary_expression -> DIGIT .)
    DIVIDE          reduce using rule 47 (primary_expression -> DIGIT .)
    LT              reduce using rule 47 (primary_expression -> DIGIT .)
    GT              reduce using rule 47 (primary_expression -> DIGIT .)
    LE              reduce using rule 47 (primary_expression -> DIGIT .)
    GE              reduce using rule 47 (primary_expression -> DIGIT .)
    EQ              reduce using rule 47 (primary_expression -> DIGIT .)
    NE              reduce using rule 47 (primary_expression -> DIGIT .)
    RPAREN          reduce using rule 47 (primary_expression -> DIGIT .)
    LAND            reduce using rule 47 (primary_expression -> DIGIT .)
    LOR             reduce using rule 47 (primary_expression -> DIGIT .)
    EQUALS          reduce using rule 47 (primary_expression -> DIGIT .)
    SEMI            reduce using rule 47 (primary_expression -> DIGIT .)


state 45

    (48) primary_expression -> STRING_SENTENCE .

    PLUS            reduce using rule 48 (primary_expression -> STRING_SENTENCE .)
    MINUS           reduce using rule 48 (primary_expression -> STRING_SENTENCE .)
    TIMES           reduce using rule 48 (primary_expression -> STRING_SENTENCE .)
    DIVIDE          reduce using rule 48 (primary_expression -> STRING_SENTENCE .)
    LT              reduce using rule 48 (primary_expression -> STRING_SENTENCE .)
    GT              reduce using rule 48 (primary_expression -> STRING_SENTENCE .)
    LE              reduce using rule 48 (primary_expression -> STRING_SENTENCE .)
    GE              reduce using rule 48 (primary_expression -> STRING_SENTENCE .)
    EQ              reduce using rule 48 (primary_expression -> STRING_SENTENCE .)
    NE              reduce using rule 48 (primary_expression -> STRING_SENTENCE .)
    RPAREN          reduce using rule 48 (primary_expression -> STRING_SENTENCE .)
    LAND            reduce using rule 48 (primary_expression -> STRING_SENTENCE .)
    LOR             reduce using rule 48 (primary_expression -> STRING_SENTENCE .)
    EQUALS          reduce using rule 48 (primary_expression -> STRING_SENTENCE .)
    SEMI            reduce using rule 48 (primary_expression -> STRING_SENTENCE .)


state 46

    (14) iteration_statement -> WHILE conditional_expression block_statement_list .

    IF              reduce using rule 14 (iteration_statement -> WHILE conditional_expression block_statement_list .)
    WHILE           reduce using rule 14 (iteration_statement -> WHILE conditional_expression block_statement_list .)
    DO              reduce using rule 14 (iteration_statement -> WHILE conditional_expression block_statement_list .)
    CONSOLE         reduce using rule 14 (iteration_statement -> WHILE conditional_expression block_statement_list .)
    INT             reduce using rule 14 (iteration_statement -> WHILE conditional_expression block_statement_list .)
    BOOL            reduce using rule 14 (iteration_statement -> WHILE conditional_expression block_statement_list .)
    STRING          reduce using rule 14 (iteration_statement -> WHILE conditional_expression block_statement_list .)
    ID              reduce using rule 14 (iteration_statement -> WHILE conditional_expression block_statement_list .)
    CONSTANT        reduce using rule 14 (iteration_statement -> WHILE conditional_expression block_statement_list .)
    $end            reduce using rule 14 (iteration_statement -> WHILE conditional_expression block_statement_list .)
    SEMI            reduce using rule 14 (iteration_statement -> WHILE conditional_expression block_statement_list .)
    RBRACE          reduce using rule 14 (iteration_statement -> WHILE conditional_expression block_statement_list .)


state 47

    (15) iteration_statement -> DO block_statement_list WHILE . conditional_expression SEMI
    (17) conditional_expression -> . LPAREN logical_expression RPAREN

    LPAREN          shift and go to state 29

    conditional_expression         shift and go to state 71

state 48

    (16) block_statement_list -> LBRACE statement_list . RBRACE
    (2) statement_list -> statement_list . statement
    (3) statement -> . expression_statement
    (4) statement -> . selection_statement
    (5) statement -> . iteration_statement
    (6) expression_statement -> . declaration_expression SEMI
    (7) expression_statement -> . output_expression SEMI
    (8) expression_statement -> . input_expression SEMI
    (9) expression_statement -> . empty SEMI
    (12) selection_statement -> . IF conditional_expression block_statement_list
    (13) selection_statement -> . selection_statement ELSE block_statement_list
    (14) iteration_statement -> . WHILE conditional_expression block_statement_list
    (15) iteration_statement -> . DO block_statement_list WHILE conditional_expression SEMI
    (10) declaration_expression -> . assignment_expression
    (11) declaration_expression -> . type_specifier declaration_expression
    (30) output_expression -> . CONSOLE DOT WRITELINE conditional_expression
    (29) input_expression -> . CONSOLE DOT READLINE
    (51) empty -> .
    (18) assignment_expression -> . variable_expression
    (19) assignment_expression -> . assignment_expression EQUALS logical_expression
    (20) assignment_expression -> . assignment_expression EQUALS input_expression
    (31) type_specifier -> . INT
    (32) type_specifier -> . BOOL
    (33) type_specifier -> . STRING
    (49) variable_expression -> . ID
    (50) variable_expression -> . CONSTANT

    RBRACE          shift and go to state 72
    IF              shift and go to state 11
    WHILE           shift and go to state 12
    DO              shift and go to state 13
    CONSOLE         shift and go to state 16
    SEMI            reduce using rule 51 (empty -> .)
    INT             shift and go to state 18
    BOOL            shift and go to state 19
    STRING          shift and go to state 20
    ID              shift and go to state 21
    CONSTANT        shift and go to state 22

    statement                      shift and go to state 3
    expression_statement           shift and go to state 4
    selection_statement            shift and go to state 5
    iteration_statement            shift and go to state 6
    declaration_expression         shift and go to state 7
    output_expression              shift and go to state 8
    input_expression               shift and go to state 9
    empty                          shift and go to state 10
    assignment_expression          shift and go to state 14
    type_specifier                 shift and go to state 15
    variable_expression            shift and go to state 17

state 49

    (19) assignment_expression -> assignment_expression EQUALS logical_expression .
    (22) logical_expression -> logical_expression . logical_operators equality_expression
    (34) logical_operators -> . LAND
    (35) logical_operators -> . LOR

    EQUALS          reduce using rule 19 (assignment_expression -> assignment_expression EQUALS logical_expression .)
    SEMI            reduce using rule 19 (assignment_expression -> assignment_expression EQUALS logical_expression .)
    LAND            shift and go to state 56
    LOR             shift and go to state 57

    logical_operators              shift and go to state 55

state 50

    (20) assignment_expression -> assignment_expression EQUALS input_expression .

    EQUALS          reduce using rule 20 (assignment_expression -> assignment_expression EQUALS input_expression .)
    SEMI            reduce using rule 20 (assignment_expression -> assignment_expression EQUALS input_expression .)


state 51

    (29) input_expression -> CONSOLE . DOT READLINE

    DOT             shift and go to state 73


state 52

    (30) output_expression -> CONSOLE DOT WRITELINE . conditional_expression
    (17) conditional_expression -> . LPAREN logical_expression RPAREN

    LPAREN          shift and go to state 29

    conditional_expression         shift and go to state 74

state 53

    (29) input_expression -> CONSOLE DOT READLINE .

    SEMI            reduce using rule 29 (input_expression -> CONSOLE DOT READLINE .)
    EQUALS          reduce using rule 29 (input_expression -> CONSOLE DOT READLINE .)


state 54

    (17) conditional_expression -> LPAREN logical_expression RPAREN .

    LBRACE          reduce using rule 17 (conditional_expression -> LPAREN logical_expression RPAREN .)
    SEMI            reduce using rule 17 (conditional_expression -> LPAREN logical_expression RPAREN .)


state 55

    (22) logical_expression -> logical_expression logical_operators . equality_expression
    (23) equality_expression -> . relational_expression
    (24) equality_expression -> . equality_expression equality_operators relational_expression
    (25) relational_expression -> . math_expression
    (26) relational_expression -> . relational_expression relational_operators math_expression
    (27) math_expression -> . primary_expression
    (28) math_expression -> . math_expression math_operators primary_expression
    (46) primary_expression -> . variable_expression
    (47) primary_expression -> . DIGIT
    (48) primary_expression -> . STRING_SENTENCE
    (49) variable_expression -> . ID
    (50) variable_expression -> . CONSTANT

    DIGIT           shift and go to state 44
    STRING_SENTENCE shift and go to state 45
    ID              shift and go to state 21
    CONSTANT        shift and go to state 22

    equality_expression            shift and go to state 75
    relational_expression          shift and go to state 40
    math_expression                shift and go to state 41
    primary_expression             shift and go to state 42
    variable_expression            shift and go to state 43

state 56

    (34) logical_operators -> LAND .

    DIGIT           reduce using rule 34 (logical_operators -> LAND .)
    STRING_SENTENCE reduce using rule 34 (logical_operators -> LAND .)
    ID              reduce using rule 34 (logical_operators -> LAND .)
    CONSTANT        reduce using rule 34 (logical_operators -> LAND .)


state 57

    (35) logical_operators -> LOR .

    DIGIT           reduce using rule 35 (logical_operators -> LOR .)
    STRING_SENTENCE reduce using rule 35 (logical_operators -> LOR .)
    ID              reduce using rule 35 (logical_operators -> LOR .)
    CONSTANT        reduce using rule 35 (logical_operators -> LOR .)


state 58

    (24) equality_expression -> equality_expression equality_operators . relational_expression
    (25) relational_expression -> . math_expression
    (26) relational_expression -> . relational_expression relational_operators math_expression
    (27) math_expression -> . primary_expression
    (28) math_expression -> . math_expression math_operators primary_expression
    (46) primary_expression -> . variable_expression
    (47) primary_expression -> . DIGIT
    (48) primary_expression -> . STRING_SENTENCE
    (49) variable_expression -> . ID
    (50) variable_expression -> . CONSTANT

    DIGIT           shift and go to state 44
    STRING_SENTENCE shift and go to state 45
    ID              shift and go to state 21
    CONSTANT        shift and go to state 22

    relational_expression          shift and go to state 76
    math_expression                shift and go to state 41
    primary_expression             shift and go to state 42
    variable_expression            shift and go to state 43

state 59

    (36) equality_operators -> EQ .

    DIGIT           reduce using rule 36 (equality_operators -> EQ .)
    STRING_SENTENCE reduce using rule 36 (equality_operators -> EQ .)
    ID              reduce using rule 36 (equality_operators -> EQ .)
    CONSTANT        reduce using rule 36 (equality_operators -> EQ .)


state 60

    (37) equality_operators -> NE .

    DIGIT           reduce using rule 37 (equality_operators -> NE .)
    STRING_SENTENCE reduce using rule 37 (equality_operators -> NE .)
    ID              reduce using rule 37 (equality_operators -> NE .)
    CONSTANT        reduce using rule 37 (equality_operators -> NE .)


state 61

    (26) relational_expression -> relational_expression relational_operators . math_expression
    (27) math_expression -> . primary_expression
    (28) math_expression -> . math_expression math_operators primary_expression
    (46) primary_expression -> . variable_expression
    (47) primary_expression -> . DIGIT
    (48) primary_expression -> . STRING_SENTENCE
    (49) variable_expression -> . ID
    (50) variable_expression -> . CONSTANT

    DIGIT           shift and go to state 44
    STRING_SENTENCE shift and go to state 45
    ID              shift and go to state 21
    CONSTANT        shift and go to state 22

    math_expression                shift and go to state 77
    primary_expression             shift and go to state 42
    variable_expression            shift and go to state 43

state 62

    (38) relational_operators -> LT .

    DIGIT           reduce using rule 38 (relational_operators -> LT .)
    STRING_SENTENCE reduce using rule 38 (relational_operators -> LT .)
    ID              reduce using rule 38 (relational_operators -> LT .)
    CONSTANT        reduce using rule 38 (relational_operators -> LT .)


state 63

    (39) relational_operators -> GT .

    DIGIT           reduce using rule 39 (relational_operators -> GT .)
    STRING_SENTENCE reduce using rule 39 (relational_operators -> GT .)
    ID              reduce using rule 39 (relational_operators -> GT .)
    CONSTANT        reduce using rule 39 (relational_operators -> GT .)


state 64

    (40) relational_operators -> LE .

    DIGIT           reduce using rule 40 (relational_operators -> LE .)
    STRING_SENTENCE reduce using rule 40 (relational_operators -> LE .)
    ID              reduce using rule 40 (relational_operators -> LE .)
    CONSTANT        reduce using rule 40 (relational_operators -> LE .)


state 65

    (41) relational_operators -> GE .

    DIGIT           reduce using rule 41 (relational_operators -> GE .)
    STRING_SENTENCE reduce using rule 41 (relational_operators -> GE .)
    ID              reduce using rule 41 (relational_operators -> GE .)
    CONSTANT        reduce using rule 41 (relational_operators -> GE .)


state 66

    (28) math_expression -> math_expression math_operators . primary_expression
    (46) primary_expression -> . variable_expression
    (47) primary_expression -> . DIGIT
    (48) primary_expression -> . STRING_SENTENCE
    (49) variable_expression -> . ID
    (50) variable_expression -> . CONSTANT

    DIGIT           shift and go to state 44
    STRING_SENTENCE shift and go to state 45
    ID              shift and go to state 21
    CONSTANT        shift and go to state 22

    primary_expression             shift and go to state 78
    variable_expression            shift and go to state 43

state 67

    (42) math_operators -> PLUS .

    DIGIT           reduce using rule 42 (math_operators -> PLUS .)
    STRING_SENTENCE reduce using rule 42 (math_operators -> PLUS .)
    ID              reduce using rule 42 (math_operators -> PLUS .)
    CONSTANT        reduce using rule 42 (math_operators -> PLUS .)


state 68

    (43) math_operators -> MINUS .

    DIGIT           reduce using rule 43 (math_operators -> MINUS .)
    STRING_SENTENCE reduce using rule 43 (math_operators -> MINUS .)
    ID              reduce using rule 43 (math_operators -> MINUS .)
    CONSTANT        reduce using rule 43 (math_operators -> MINUS .)


state 69

    (44) math_operators -> TIMES .

    DIGIT           reduce using rule 44 (math_operators -> TIMES .)
    STRING_SENTENCE reduce using rule 44 (math_operators -> TIMES .)
    ID              reduce using rule 44 (math_operators -> TIMES .)
    CONSTANT        reduce using rule 44 (math_operators -> TIMES .)


state 70

    (45) math_operators -> DIVIDE .

    DIGIT           reduce using rule 45 (math_operators -> DIVIDE .)
    STRING_SENTENCE reduce using rule 45 (math_operators -> DIVIDE .)
    ID              reduce using rule 45 (math_operators -> DIVIDE .)
    CONSTANT        reduce using rule 45 (math_operators -> DIVIDE .)


state 71

    (15) iteration_statement -> DO block_statement_list WHILE conditional_expression . SEMI

    SEMI            shift and go to state 79


state 72

    (16) block_statement_list -> LBRACE statement_list RBRACE .

    WHILE           reduce using rule 16 (block_statement_list -> LBRACE statement_list RBRACE .)
    ELSE            reduce using rule 16 (block_statement_list -> LBRACE statement_list RBRACE .)
    IF              reduce using rule 16 (block_statement_list -> LBRACE statement_list RBRACE .)
    DO              reduce using rule 16 (block_statement_list -> LBRACE statement_list RBRACE .)
    CONSOLE         reduce using rule 16 (block_statement_list -> LBRACE statement_list RBRACE .)
    INT             reduce using rule 16 (block_statement_list -> LBRACE statement_list RBRACE .)
    BOOL            reduce using rule 16 (block_statement_list -> LBRACE statement_list RBRACE .)
    STRING          reduce using rule 16 (block_statement_list -> LBRACE statement_list RBRACE .)
    ID              reduce using rule 16 (block_statement_list -> LBRACE statement_list RBRACE .)
    CONSTANT        reduce using rule 16 (block_statement_list -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 16 (block_statement_list -> LBRACE statement_list RBRACE .)
    SEMI            reduce using rule 16 (block_statement_list -> LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 16 (block_statement_list -> LBRACE statement_list RBRACE .)


state 73

    (29) input_expression -> CONSOLE DOT . READLINE

    READLINE        shift and go to state 53


state 74

    (30) output_expression -> CONSOLE DOT WRITELINE conditional_expression .

    SEMI            reduce using rule 30 (output_expression -> CONSOLE DOT WRITELINE conditional_expression .)


state 75

    (22) logical_expression -> logical_expression logical_operators equality_expression .
    (24) equality_expression -> equality_expression . equality_operators relational_expression
    (36) equality_operators -> . EQ
    (37) equality_operators -> . NE

    RPAREN          reduce using rule 22 (logical_expression -> logical_expression logical_operators equality_expression .)
    LAND            reduce using rule 22 (logical_expression -> logical_expression logical_operators equality_expression .)
    LOR             reduce using rule 22 (logical_expression -> logical_expression logical_operators equality_expression .)
    EQUALS          reduce using rule 22 (logical_expression -> logical_expression logical_operators equality_expression .)
    SEMI            reduce using rule 22 (logical_expression -> logical_expression logical_operators equality_expression .)
    EQ              shift and go to state 59
    NE              shift and go to state 60

    equality_operators             shift and go to state 58

state 76

    (24) equality_expression -> equality_expression equality_operators relational_expression .
    (26) relational_expression -> relational_expression . relational_operators math_expression
    (38) relational_operators -> . LT
    (39) relational_operators -> . GT
    (40) relational_operators -> . LE
    (41) relational_operators -> . GE

    EQ              reduce using rule 24 (equality_expression -> equality_expression equality_operators relational_expression .)
    NE              reduce using rule 24 (equality_expression -> equality_expression equality_operators relational_expression .)
    RPAREN          reduce using rule 24 (equality_expression -> equality_expression equality_operators relational_expression .)
    LAND            reduce using rule 24 (equality_expression -> equality_expression equality_operators relational_expression .)
    LOR             reduce using rule 24 (equality_expression -> equality_expression equality_operators relational_expression .)
    EQUALS          reduce using rule 24 (equality_expression -> equality_expression equality_operators relational_expression .)
    SEMI            reduce using rule 24 (equality_expression -> equality_expression equality_operators relational_expression .)
    LT              shift and go to state 62
    GT              shift and go to state 63
    LE              shift and go to state 64
    GE              shift and go to state 65

    relational_operators           shift and go to state 61

state 77

    (26) relational_expression -> relational_expression relational_operators math_expression .
    (28) math_expression -> math_expression . math_operators primary_expression
    (42) math_operators -> . PLUS
    (43) math_operators -> . MINUS
    (44) math_operators -> . TIMES
    (45) math_operators -> . DIVIDE

    LT              reduce using rule 26 (relational_expression -> relational_expression relational_operators math_expression .)
    GT              reduce using rule 26 (relational_expression -> relational_expression relational_operators math_expression .)
    LE              reduce using rule 26 (relational_expression -> relational_expression relational_operators math_expression .)
    GE              reduce using rule 26 (relational_expression -> relational_expression relational_operators math_expression .)
    EQ              reduce using rule 26 (relational_expression -> relational_expression relational_operators math_expression .)
    NE              reduce using rule 26 (relational_expression -> relational_expression relational_operators math_expression .)
    RPAREN          reduce using rule 26 (relational_expression -> relational_expression relational_operators math_expression .)
    LAND            reduce using rule 26 (relational_expression -> relational_expression relational_operators math_expression .)
    LOR             reduce using rule 26 (relational_expression -> relational_expression relational_operators math_expression .)
    EQUALS          reduce using rule 26 (relational_expression -> relational_expression relational_operators math_expression .)
    SEMI            reduce using rule 26 (relational_expression -> relational_expression relational_operators math_expression .)
    PLUS            shift and go to state 67
    MINUS           shift and go to state 68
    TIMES           shift and go to state 69
    DIVIDE          shift and go to state 70

    math_operators                 shift and go to state 66

state 78

    (28) math_expression -> math_expression math_operators primary_expression .

    PLUS            reduce using rule 28 (math_expression -> math_expression math_operators primary_expression .)
    MINUS           reduce using rule 28 (math_expression -> math_expression math_operators primary_expression .)
    TIMES           reduce using rule 28 (math_expression -> math_expression math_operators primary_expression .)
    DIVIDE          reduce using rule 28 (math_expression -> math_expression math_operators primary_expression .)
    LT              reduce using rule 28 (math_expression -> math_expression math_operators primary_expression .)
    GT              reduce using rule 28 (math_expression -> math_expression math_operators primary_expression .)
    LE              reduce using rule 28 (math_expression -> math_expression math_operators primary_expression .)
    GE              reduce using rule 28 (math_expression -> math_expression math_operators primary_expression .)
    EQ              reduce using rule 28 (math_expression -> math_expression math_operators primary_expression .)
    NE              reduce using rule 28 (math_expression -> math_expression math_operators primary_expression .)
    RPAREN          reduce using rule 28 (math_expression -> math_expression math_operators primary_expression .)
    LAND            reduce using rule 28 (math_expression -> math_expression math_operators primary_expression .)
    LOR             reduce using rule 28 (math_expression -> math_expression math_operators primary_expression .)
    EQUALS          reduce using rule 28 (math_expression -> math_expression math_operators primary_expression .)
    SEMI            reduce using rule 28 (math_expression -> math_expression math_operators primary_expression .)


state 79

    (15) iteration_statement -> DO block_statement_list WHILE conditional_expression SEMI .

    IF              reduce using rule 15 (iteration_statement -> DO block_statement_list WHILE conditional_expression SEMI .)
    WHILE           reduce using rule 15 (iteration_statement -> DO block_statement_list WHILE conditional_expression SEMI .)
    DO              reduce using rule 15 (iteration_statement -> DO block_statement_list WHILE conditional_expression SEMI .)
    CONSOLE         reduce using rule 15 (iteration_statement -> DO block_statement_list WHILE conditional_expression SEMI .)
    INT             reduce using rule 15 (iteration_statement -> DO block_statement_list WHILE conditional_expression SEMI .)
    BOOL            reduce using rule 15 (iteration_statement -> DO block_statement_list WHILE conditional_expression SEMI .)
    STRING          reduce using rule 15 (iteration_statement -> DO block_statement_list WHILE conditional_expression SEMI .)
    ID              reduce using rule 15 (iteration_statement -> DO block_statement_list WHILE conditional_expression SEMI .)
    CONSTANT        reduce using rule 15 (iteration_statement -> DO block_statement_list WHILE conditional_expression SEMI .)
    $end            reduce using rule 15 (iteration_statement -> DO block_statement_list WHILE conditional_expression SEMI .)
    SEMI            reduce using rule 15 (iteration_statement -> DO block_statement_list WHILE conditional_expression SEMI .)
    RBRACE          reduce using rule 15 (iteration_statement -> DO block_statement_list WHILE conditional_expression SEMI .)

