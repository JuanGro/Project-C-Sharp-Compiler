Created by PLY version 3.10 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> statement_list
Rule 1     statement_list -> statement
Rule 2     statement_list -> statement_list statement
Rule 3     statement -> expression_statement
Rule 4     statement -> selection_statement
Rule 5     statement -> iteration_statement
Rule 6     expression_statement -> declaration_expression SEMI
Rule 7     expression_statement -> output_expression SEMI
Rule 8     expression_statement -> input_expression SEMI
Rule 9     expression_statement -> empty SEMI
Rule 10    expression_statement -> empty
Rule 11    declaration_expression -> assignment_expression
Rule 12    declaration_expression -> type_specifier declaration_expression
Rule 13    selection_statement -> IF conditional_expression block_statement_list
Rule 14    selection_statement -> selection_statement ELSE block_statement_list
Rule 15    iteration_statement -> WHILE conditional_expression block_statement_list
Rule 16    iteration_statement -> DO block_statement_list WHILE conditional_expression SEMI
Rule 17    block_statement_list -> LBRACE statement_list RBRACE
Rule 18    conditional_expression -> LPAREN logical_expression RPAREN
Rule 19    assignment_expression -> variable_expression
Rule 20    assignment_expression -> assignment_expression EQUALS logical_expression
Rule 21    assignment_expression -> assignment_expression EQUALS input_expression
Rule 22    logical_expression -> equality_expression
Rule 23    logical_expression -> logical_expression logical_operators equality_expression
Rule 24    equality_expression -> relational_expression
Rule 25    equality_expression -> equality_expression equality_operators relational_expression
Rule 26    relational_expression -> math_expression
Rule 27    relational_expression -> relational_expression relational_operators math_expression
Rule 28    math_expression -> primary_expression
Rule 29    math_expression -> math_expression math_operators primary_expression
Rule 30    input_expression -> CONSOLE DOT READLINE
Rule 31    output_expression -> CONSOLE DOT WRITELINE conditional_expression
Rule 32    type_specifier -> INT
Rule 33    type_specifier -> BOOL
Rule 34    type_specifier -> STRING
Rule 35    logical_operators -> LAND
Rule 36    logical_operators -> LOR
Rule 37    equality_operators -> EQ
Rule 38    equality_operators -> NE
Rule 39    relational_operators -> LT
Rule 40    relational_operators -> GT
Rule 41    relational_operators -> LE
Rule 42    relational_operators -> GE
Rule 43    math_operators -> PLUS
Rule 44    math_operators -> MINUS
Rule 45    math_operators -> TIMES
Rule 46    math_operators -> DIVIDE
Rule 47    primary_expression -> variable_expression
Rule 48    primary_expression -> DIGIT
Rule 49    primary_expression -> STRING_SENTENCE
Rule 50    variable_expression -> ID
Rule 51    empty -> <empty>

Terminals, with rules where they appear

BOOL                 : 33
CONSOLE              : 30 31
DIGIT                : 48
DIVIDE               : 46
DO                   : 16
DOT                  : 30 31
ELSE                 : 14
EQ                   : 37
EQUALS               : 20 21
GE                   : 42
GT                   : 40
ID                   : 50
IF                   : 13
INT                  : 32
LAND                 : 35
LBRACE               : 17
LE                   : 41
LOR                  : 36
LPAREN               : 18
LT                   : 39
MINUS                : 44
NE                   : 38
PLUS                 : 43
RBRACE               : 17
READLINE             : 30
RPAREN               : 18
SEMI                 : 6 7 8 9 16
STRING               : 34
STRING_SENTENCE      : 49
TIMES                : 45
WHILE                : 15 16
WRITELINE            : 31
error                : 

Nonterminals, with rules where they appear

assignment_expression : 11 20 21
block_statement_list : 13 14 15 16
conditional_expression : 13 15 16 31
declaration_expression : 6 12
empty                : 9 10
equality_expression  : 22 23 25
equality_operators   : 25
expression_statement : 3
input_expression     : 8 21
iteration_statement  : 5
logical_expression   : 18 20 23
logical_operators    : 23
math_expression      : 26 27 29
math_operators       : 29
output_expression    : 7
primary_expression   : 28 29
relational_expression : 24 25 27
relational_operators : 27
selection_statement  : 4 14
statement            : 1 2
statement_list       : 2 17 0
type_specifier       : 12
variable_expression  : 19 47

Parsing method: LALR

state 0

    (0) S' -> . statement_list
    (1) statement_list -> . statement
    (2) statement_list -> . statement_list statement
    (3) statement -> . expression_statement
    (4) statement -> . selection_statement
    (5) statement -> . iteration_statement
    (6) expression_statement -> . declaration_expression SEMI
    (7) expression_statement -> . output_expression SEMI
    (8) expression_statement -> . input_expression SEMI
    (9) expression_statement -> . empty SEMI
    (10) expression_statement -> . empty
    (13) selection_statement -> . IF conditional_expression block_statement_list
    (14) selection_statement -> . selection_statement ELSE block_statement_list
    (15) iteration_statement -> . WHILE conditional_expression block_statement_list
    (16) iteration_statement -> . DO block_statement_list WHILE conditional_expression SEMI
    (11) declaration_expression -> . assignment_expression
    (12) declaration_expression -> . type_specifier declaration_expression
    (31) output_expression -> . CONSOLE DOT WRITELINE conditional_expression
    (30) input_expression -> . CONSOLE DOT READLINE
    (51) empty -> .
    (19) assignment_expression -> . variable_expression
    (20) assignment_expression -> . assignment_expression EQUALS logical_expression
    (21) assignment_expression -> . assignment_expression EQUALS input_expression
    (32) type_specifier -> . INT
    (33) type_specifier -> . BOOL
    (34) type_specifier -> . STRING
    (50) variable_expression -> . ID

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for CONSOLE resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for STRING resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    IF              shift and go to state 10
    WHILE           shift and go to state 11
    DO              shift and go to state 12
    CONSOLE         shift and go to state 15
    SEMI            reduce using rule 51 (empty -> .)
    $end            reduce using rule 51 (empty -> .)
    INT             shift and go to state 17
    BOOL            shift and go to state 18
    STRING          shift and go to state 19
    ID              shift and go to state 20

  ! IF              [ reduce using rule 51 (empty -> .) ]
  ! WHILE           [ reduce using rule 51 (empty -> .) ]
  ! DO              [ reduce using rule 51 (empty -> .) ]
  ! CONSOLE         [ reduce using rule 51 (empty -> .) ]
  ! INT             [ reduce using rule 51 (empty -> .) ]
  ! BOOL            [ reduce using rule 51 (empty -> .) ]
  ! STRING          [ reduce using rule 51 (empty -> .) ]
  ! ID              [ reduce using rule 51 (empty -> .) ]

    statement_list                 shift and go to state 1
    statement                      shift and go to state 2
    expression_statement           shift and go to state 3
    selection_statement            shift and go to state 4
    iteration_statement            shift and go to state 5
    declaration_expression         shift and go to state 6
    output_expression              shift and go to state 7
    input_expression               shift and go to state 8
    empty                          shift and go to state 9
    assignment_expression          shift and go to state 13
    type_specifier                 shift and go to state 14
    variable_expression            shift and go to state 16

state 1

    (0) S' -> statement_list .
    (2) statement_list -> statement_list . statement
    (3) statement -> . expression_statement
    (4) statement -> . selection_statement
    (5) statement -> . iteration_statement
    (6) expression_statement -> . declaration_expression SEMI
    (7) expression_statement -> . output_expression SEMI
    (8) expression_statement -> . input_expression SEMI
    (9) expression_statement -> . empty SEMI
    (10) expression_statement -> . empty
    (13) selection_statement -> . IF conditional_expression block_statement_list
    (14) selection_statement -> . selection_statement ELSE block_statement_list
    (15) iteration_statement -> . WHILE conditional_expression block_statement_list
    (16) iteration_statement -> . DO block_statement_list WHILE conditional_expression SEMI
    (11) declaration_expression -> . assignment_expression
    (12) declaration_expression -> . type_specifier declaration_expression
    (31) output_expression -> . CONSOLE DOT WRITELINE conditional_expression
    (30) input_expression -> . CONSOLE DOT READLINE
    (51) empty -> .
    (19) assignment_expression -> . variable_expression
    (20) assignment_expression -> . assignment_expression EQUALS logical_expression
    (21) assignment_expression -> . assignment_expression EQUALS input_expression
    (32) type_specifier -> . INT
    (33) type_specifier -> . BOOL
    (34) type_specifier -> . STRING
    (50) variable_expression -> . ID

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for DO resolved as shift
  ! shift/reduce conflict for CONSOLE resolved as shift
