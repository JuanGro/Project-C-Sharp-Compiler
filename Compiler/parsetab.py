
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'IF ELSE DO WHILE INT BOOL STRING ID PLUS MINUS TIMES DIVIDE LOR LAND LT LE GT GE EQ NE EQUALS LPAREN RPAREN LBRACE RBRACE DOT SEMI STRING_SENTENCE DIGIT CONSOLE WRITELINE READLINEstatement_list : statementstatement_list : statement_list statement\n    statement : expression_statement\n              | selection_statement\n              | iteration_statement\n    expression_statement : declaration_expression SEMIexpression_statement : output_expression SEMIexpression_statement : input_expression SEMIexpression_statement : empty SEMIdeclaration_expression : assignment_expressiondeclaration_expression : type_specifier declaration_expressionselection_statement : IF conditional_expression block_statement_listselection_statement : selection_statement ELSE block_statement_listiteration_statement : WHILE conditional_expression block_statement_listiteration_statement : DO block_statement_list WHILE conditional_expression SEMIblock_statement_list : LBRACE statement_list RBRACEconditional_expression : LPAREN logical_expression RPARENassignment_expression : variable_expressionassignment_expression : assignment_expression EQUALS logical_expressionassignment_expression : assignment_expression EQUALS input_expressionlogical_expression : equality_expressionlogical_expression : logical_expression logical_operators equality_expressionequality_expression : relational_expressionequality_expression : equality_expression equality_operators relational_expressionrelational_expression : math_expressionrelational_expression : relational_expression relational_operators math_expressionmath_expression : primary_expressionmath_expression : math_expression math_operators primary_expressioninput_expression : CONSOLE DOT READLINEoutput_expression : CONSOLE DOT WRITELINE conditional_expression\n    type_specifier : INT\n                   | BOOL\n                   | STRING\n    \n    logical_operators : LAND\n                      | LOR\n    \n    equality_operators : EQ\n                       | NE\n    \n    relational_operators : LT\n                         | GT\n                         | LE\n                         | GE\n    \n    math_operators : PLUS\n                   | MINUS\n                   | TIMES\n                   | DIVIDE\n    \n    primary_expression :  variable_expression\n                       |  DIGIT\n                       |  STRING_SENTENCE\n    \n    variable_expression : ID\n    empty : '
    
_lr_action_items = {'IF':([0,1,2,3,4,5,21,23,24,25,26,31,35,36,45,47,71,78,],[10,10,-1,-3,-4,-5,-2,-6,-7,-8,-9,10,-13,-12,-14,10,-16,-15,]),'WHILE':([0,1,2,3,4,5,21,23,24,25,26,30,31,35,36,45,47,71,78,],[11,11,-1,-3,-4,-5,-2,-6,-7,-8,-9,46,11,-13,-12,-14,11,-16,-15,]),'DO':([0,1,2,3,4,5,21,23,24,25,26,31,35,36,45,47,71,78,],[12,12,-1,-3,-4,-5,-2,-6,-7,-8,-9,12,-13,-12,-14,12,-16,-15,]),'CONSOLE':([0,1,2,3,4,5,21,23,24,25,26,31,32,35,36,45,47,71,78,],[15,15,-1,-3,-4,-5,-2,-6,-7,-8,-9,15,50,-13,-12,-14,15,-16,-15,]),'SEMI':([0,1,2,3,4,5,6,7,8,9,13,16,20,21,23,24,25,26,31,33,35,36,38,39,40,41,42,43,44,45,47,48,49,52,53,70,71,73,74,75,76,77,78,],[-50,-50,-1,-3,-4,-5,23,24,25,26,-10,-18,-49,-2,-6,-7,-8,-9,-50,-11,-13,-12,-21,-23,-25,-27,-46,-47,-48,-14,-50,-19,-20,-29,-17,78,-16,-30,-22,-24,-26,-28,-15,]),'INT':([0,1,2,3,4,5,14,17,18,19,21,23,24,25,26,31,35,36,45,47,71,78,],[17,17,-1,-3,-4,-5,17,-31,-32,-33,-2,-6,-7,-8,-9,17,-13,-12,-14,17,-16,-15,]),'BOOL':([0,1,2,3,4,5,14,17,18,19,21,23,24,25,26,31,35,36,45,47,71,78,],[18,18,-1,-3,-4,-5,18,-31,-32,-33,-2,-6,-7,-8,-9,18,-13,-12,-14,18,-16,-15,]),'STRING':([0,1,2,3,4,5,14,17,18,19,21,23,24,25,26,31,35,36,45,47,71,78,],[19,19,-1,-3,-4,-5,19,-31,-32,-33,-2,-6,-7,-8,-9,19,-13,-12,-14,19,-16,-15,]),'ID':([0,1,2,3,4,5,14,17,18,19,21,23,24,25,26,28,31,32,35,36,45,47,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,71,78,],[20,20,-1,-3,-4,-5,20,-31,-32,-33,-2,-6,-7,-8,-9,20,20,20,-13,-12,-14,20,20,-34,-35,20,-36,-37,20,-38,-39,-40,-41,20,-42,-43,-44,-45,-16,-15,]),'$end':([1,2,3,4,5,21,23,24,25,26,35,36,45,71,78,],[0,-1,-3,-4,-5,-2,-6,-7,-8,-9,-13,-12,-14,-16,-15,]),'RBRACE':([2,3,4,5,21,23,24,25,26,35,36,45,47,71,78,],[-1,-3,-4,-5,-2,-6,-7,-8,-9,-13,-12,-14,71,-16,-15,]),'ELSE':([4,35,36,71,],[22,-13,-12,-16,]),'LPAREN':([10,11,46,51,],[28,28,28,28,]),'LBRACE':([12,22,27,29,53,],[31,31,31,31,-17,]),'EQUALS':([13,16,20,38,39,40,41,42,43,44,48,49,52,74,75,76,77,],[32,-18,-49,-21,-23,-25,-27,-46,-47,-48,-19,-20,-29,-22,-24,-26,-28,]),'DOT':([15,50,],[34,72,]),'PLUS':([20,40,41,42,43,44,76,77,],[-49,66,-27,-46,-47,-48,66,-28,]),'MINUS':([20,40,41,42,43,44,76,77,],[-49,67,-27,-46,-47,-48,67,-28,]),'TIMES':([20,40,41,42,43,44,76,77,],[-49,68,-27,-46,-47,-48,68,-28,]),'DIVIDE':([20,40,41,42,43,44,76,77,],[-49,69,-27,-46,-47,-48,69,-28,]),'LT':([20,39,40,41,42,43,44,75,76,77,],[-49,61,-25,-27,-46,-47,-48,61,-26,-28,]),'GT':([20,39,40,41,42,43,44,75,76,77,],[-49,62,-25,-27,-46,-47,-48,62,-26,-28,]),'LE':([20,39,40,41,42,43,44,75,76,77,],[-49,63,-25,-27,-46,-47,-48,63,-26,-28,]),'GE':([20,39,40,41,42,43,44,75,76,77,],[-49,64,-25,-27,-46,-47,-48,64,-26,-28,]),'EQ':([20,38,39,40,41,42,43,44,74,75,76,77,],[-49,58,-23,-25,-27,-46,-47,-48,58,-24,-26,-28,]),'NE':([20,38,39,40,41,42,43,44,74,75,76,77,],[-49,59,-23,-25,-27,-46,-47,-48,59,-24,-26,-28,]),'RPAREN':([20,37,38,39,40,41,42,43,44,74,75,76,77,],[-49,53,-21,-23,-25,-27,-46,-47,-48,-22,-24,-26,-28,]),'LAND':([20,37,38,39,40,41,42,43,44,48,74,75,76,77,],[-49,55,-21,-23,-25,-27,-46,-47,-48,55,-22,-24,-26,-28,]),'LOR':([20,37,38,39,40,41,42,43,44,48,74,75,76,77,],[-49,56,-21,-23,-25,-27,-46,-47,-48,56,-22,-24,-26,-28,]),'DIGIT':([28,32,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,],[43,43,43,-34,-35,43,-36,-37,43,-38,-39,-40,-41,43,-42,-43,-44,-45,]),'STRING_SENTENCE':([28,32,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,],[44,44,44,-34,-35,44,-36,-37,44,-38,-39,-40,-41,44,-42,-43,-44,-45,]),'WRITELINE':([34,],[51,]),'READLINE':([34,72,],[52,52,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement_list':([0,31,],[1,47,]),'statement':([0,1,31,47,],[2,21,2,21,]),'expression_statement':([0,1,31,47,],[3,3,3,3,]),'selection_statement':([0,1,31,47,],[4,4,4,4,]),'iteration_statement':([0,1,31,47,],[5,5,5,5,]),'declaration_expression':([0,1,14,31,47,],[6,6,33,6,6,]),'output_expression':([0,1,31,47,],[7,7,7,7,]),'input_expression':([0,1,31,32,47,],[8,8,8,49,8,]),'empty':([0,1,31,47,],[9,9,9,9,]),'assignment_expression':([0,1,14,31,47,],[13,13,13,13,13,]),'type_specifier':([0,1,14,31,47,],[14,14,14,14,14,]),'variable_expression':([0,1,14,28,31,32,47,54,57,60,65,],[16,16,16,42,16,42,16,42,42,42,42,]),'conditional_expression':([10,11,46,51,],[27,29,70,73,]),'block_statement_list':([12,22,27,29,],[30,35,36,45,]),'logical_expression':([28,32,],[37,48,]),'equality_expression':([28,32,54,],[38,38,74,]),'relational_expression':([28,32,54,57,],[39,39,39,75,]),'math_expression':([28,32,54,57,60,],[40,40,40,40,76,]),'primary_expression':([28,32,54,57,60,65,],[41,41,41,41,41,77,]),'logical_operators':([37,48,],[54,54,]),'equality_operators':([38,74,],[57,57,]),'relational_operators':([39,75,],[60,60,]),'math_operators':([40,76,],[65,65,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement_list","S'",1,None,None,None),
  ('statement_list -> statement','statement_list',1,'p_statement_list_1','parser.py',10),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list_2','parser.py',14),
  ('statement -> expression_statement','statement',1,'p_statement','parser.py',20),
  ('statement -> selection_statement','statement',1,'p_statement','parser.py',21),
  ('statement -> iteration_statement','statement',1,'p_statement','parser.py',22),
  ('expression_statement -> declaration_expression SEMI','expression_statement',2,'p_expression_statement_1','parser.py',28),
  ('expression_statement -> output_expression SEMI','expression_statement',2,'p_expression_statement_2','parser.py',32),
  ('expression_statement -> input_expression SEMI','expression_statement',2,'p_expression_statement_3','parser.py',37),
  ('expression_statement -> empty SEMI','expression_statement',2,'p_expression_statement_4','parser.py',41),
  ('declaration_expression -> assignment_expression','declaration_expression',1,'p_declaration_expression_1','parser.py',46),
  ('declaration_expression -> type_specifier declaration_expression','declaration_expression',2,'p_declaration_expression_2','parser.py',50),
  ('selection_statement -> IF conditional_expression block_statement_list','selection_statement',3,'p_selection_statement_1','parser.py',55),
  ('selection_statement -> selection_statement ELSE block_statement_list','selection_statement',3,'p_selection_statement_2','parser.py',59),
  ('iteration_statement -> WHILE conditional_expression block_statement_list','iteration_statement',3,'p_iteration_statement_1','parser.py',64),
  ('iteration_statement -> DO block_statement_list WHILE conditional_expression SEMI','iteration_statement',5,'p_iteration_statement_2','parser.py',68),
  ('block_statement_list -> LBRACE statement_list RBRACE','block_statement_list',3,'p_block_statement_list_1','parser.py',73),
  ('conditional_expression -> LPAREN logical_expression RPAREN','conditional_expression',3,'p_conditional_expression_1','parser.py',78),
  ('assignment_expression -> variable_expression','assignment_expression',1,'p_assignment_expression_1','parser.py',83),
  ('assignment_expression -> assignment_expression EQUALS logical_expression','assignment_expression',3,'p_assignment_expression_2','parser.py',87),
  ('assignment_expression -> assignment_expression EQUALS input_expression','assignment_expression',3,'p_assignment_expression_3','parser.py',91),
  ('logical_expression -> equality_expression','logical_expression',1,'p_logical_expression_1','parser.py',96),
  ('logical_expression -> logical_expression logical_operators equality_expression','logical_expression',3,'p_logical_expression_2','parser.py',100),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression_1','parser.py',105),
  ('equality_expression -> equality_expression equality_operators relational_expression','equality_expression',3,'p_equality_expression_2','parser.py',109),
  ('relational_expression -> math_expression','relational_expression',1,'p_relational_expression_1','parser.py',114),
  ('relational_expression -> relational_expression relational_operators math_expression','relational_expression',3,'p_relational_expression_2','parser.py',118),
  ('math_expression -> primary_expression','math_expression',1,'p_math_expression_1','parser.py',123),
  ('math_expression -> math_expression math_operators primary_expression','math_expression',3,'p_math_expression_2','parser.py',127),
  ('input_expression -> CONSOLE DOT READLINE','input_expression',3,'p_input_expression','parser.py',132),
  ('output_expression -> CONSOLE DOT WRITELINE conditional_expression','output_expression',4,'p_output_expression','parser.py',137),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','parser.py',143),
  ('type_specifier -> BOOL','type_specifier',1,'p_type_specifier','parser.py',144),
  ('type_specifier -> STRING','type_specifier',1,'p_type_specifier','parser.py',145),
  ('logical_operators -> LAND','logical_operators',1,'p_logical_operators','parser.py',151),
  ('logical_operators -> LOR','logical_operators',1,'p_logical_operators','parser.py',152),
  ('equality_operators -> EQ','equality_operators',1,'p_equality_operators','parser.py',158),
  ('equality_operators -> NE','equality_operators',1,'p_equality_operators','parser.py',159),
  ('relational_operators -> LT','relational_operators',1,'p_relational_operators','parser.py',165),
  ('relational_operators -> GT','relational_operators',1,'p_relational_operators','parser.py',166),
  ('relational_operators -> LE','relational_operators',1,'p_relational_operators','parser.py',167),
  ('relational_operators -> GE','relational_operators',1,'p_relational_operators','parser.py',168),
  ('math_operators -> PLUS','math_operators',1,'p_math_operators','parser.py',174),
  ('math_operators -> MINUS','math_operators',1,'p_math_operators','parser.py',175),
  ('math_operators -> TIMES','math_operators',1,'p_math_operators','parser.py',176),
  ('math_operators -> DIVIDE','math_operators',1,'p_math_operators','parser.py',177),
  ('primary_expression -> variable_expression','primary_expression',1,'p_primary_expression','parser.py',183),
  ('primary_expression -> DIGIT','primary_expression',1,'p_primary_expression','parser.py',184),
  ('primary_expression -> STRING_SENTENCE','primary_expression',1,'p_primary_expression','parser.py',185),
  ('variable_expression -> ID','variable_expression',1,'p_variable_expression','parser.py',191),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',196),
]
