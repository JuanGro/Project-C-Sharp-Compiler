
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'IF ELSE DO WHILE INT BOOL STRING ID PLUS MINUS TIMES DIVIDE LOR LAND LT LE GT GE EQ NE EQUALS LPAREN RPAREN LBRACE RBRACE DOT SEMI STRING_SENTENCE DIGIT CONSOLE WRITELINE READLINEstatement_list : statementstatement_list : statement_list statement\n    statement : expression_statement\n              | selection_statement\n              | iteration_statement\n    expression_statement : declaration_expression SEMIexpression_statement : output_expression SEMIexpression_statement : input_expression SEMIdeclaration_expression : assignment_expressiondeclaration_expression : type_specifier declaration_expressionselection_statement : IF conditional_expression block_statement_listselection_statement : selection_statement ELSE block_statement_listiteration_statement : WHILE conditional_expression block_statement_listiteration_statement : DO block_statement_list WHILE conditional_expression SEMIblock_statement_list : LBRACE statement_list RBRACEconditional_expression : LPAREN logical_expression RPARENassignment_expression : variable_expressionassignment_expression : assignment_expression EQUALS logical_expressionassignment_expression : assignment_expression EQUALS input_expressionlogical_expression : equality_expressionlogical_expression : logical_expression logical_operators equality_expressionequality_expression : relational_expressionequality_expression : equality_expression equality_operators relational_expressionrelational_expression : math_expressionrelational_expression : relational_expression relational_operators math_expressionmath_expression : primary_expressionmath_expression : math_expression math_operators primary_expressioninput_expression : CONSOLE DOT READLINEoutput_expression : CONSOLE DOT WRITELINE conditional_expression\n    type_specifier : INT\n                   | BOOL\n                   | STRING\n    \n    logical_operators : LAND\n                      | LOR\n    \n    equality_operators : EQ\n                       | NE\n    \n    relational_operators : LT\n                         | GT\n                         | LE\n                         | GE\n    \n    math_operators : PLUS\n                   | MINUS\n                   | TIMES\n                   | DIVIDE\n    \n    primary_expression :  variable_expression\n                       |  DIGIT\n                       |  STRING_SENTENCE\n    \n    variable_expression : ID\n    '
    
_lr_action_items = {'IF':([0,1,2,3,4,5,20,22,23,24,29,33,34,43,45,69,76,],[9,9,-1,-3,-4,-5,-2,-6,-7,-8,9,-12,-11,-13,9,-15,-14,]),'WHILE':([0,1,2,3,4,5,20,22,23,24,28,29,33,34,43,45,69,76,],[10,10,-1,-3,-4,-5,-2,-6,-7,-8,44,10,-12,-11,-13,10,-15,-14,]),'DO':([0,1,2,3,4,5,20,22,23,24,29,33,34,43,45,69,76,],[11,11,-1,-3,-4,-5,-2,-6,-7,-8,11,-12,-11,-13,11,-15,-14,]),'CONSOLE':([0,1,2,3,4,5,20,22,23,24,29,30,33,34,43,45,69,76,],[14,14,-1,-3,-4,-5,-2,-6,-7,-8,14,48,-12,-11,-13,14,-15,-14,]),'INT':([0,1,2,3,4,5,13,16,17,18,20,22,23,24,29,33,34,43,45,69,76,],[16,16,-1,-3,-4,-5,16,-30,-31,-32,-2,-6,-7,-8,16,-12,-11,-13,16,-15,-14,]),'BOOL':([0,1,2,3,4,5,13,16,17,18,20,22,23,24,29,33,34,43,45,69,76,],[17,17,-1,-3,-4,-5,17,-30,-31,-32,-2,-6,-7,-8,17,-12,-11,-13,17,-15,-14,]),'STRING':([0,1,2,3,4,5,13,16,17,18,20,22,23,24,29,33,34,43,45,69,76,],[18,18,-1,-3,-4,-5,18,-30,-31,-32,-2,-6,-7,-8,18,-12,-11,-13,18,-15,-14,]),'ID':([0,1,2,3,4,5,13,16,17,18,20,22,23,24,26,29,30,33,34,43,45,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,69,76,],[19,19,-1,-3,-4,-5,19,-30,-31,-32,-2,-6,-7,-8,19,19,19,-12,-11,-13,19,19,-33,-34,19,-35,-36,19,-37,-38,-39,-40,19,-41,-42,-43,-44,-15,-14,]),'$end':([1,2,3,4,5,20,22,23,24,33,34,43,69,76,],[0,-1,-3,-4,-5,-2,-6,-7,-8,-12,-11,-13,-15,-14,]),'RBRACE':([2,3,4,5,20,22,23,24,33,34,43,45,69,76,],[-1,-3,-4,-5,-2,-6,-7,-8,-12,-11,-13,69,-15,-14,]),'ELSE':([4,33,34,69,],[21,-12,-11,-15,]),'SEMI':([6,7,8,12,15,19,31,36,37,38,39,40,41,42,46,47,50,51,68,71,72,73,74,75,],[22,23,24,-9,-17,-48,-10,-20,-22,-24,-26,-45,-46,-47,-18,-19,-28,-16,76,-29,-21,-23,-25,-27,]),'LPAREN':([9,10,44,49,],[26,26,26,26,]),'LBRACE':([11,21,25,27,51,],[29,29,29,29,-16,]),'EQUALS':([12,15,19,36,37,38,39,40,41,42,46,47,50,72,73,74,75,],[30,-17,-48,-20,-22,-24,-26,-45,-46,-47,-18,-19,-28,-21,-23,-25,-27,]),'DOT':([14,48,],[32,70,]),'PLUS':([19,38,39,40,41,42,74,75,],[-48,64,-26,-45,-46,-47,64,-27,]),'MINUS':([19,38,39,40,41,42,74,75,],[-48,65,-26,-45,-46,-47,65,-27,]),'TIMES':([19,38,39,40,41,42,74,75,],[-48,66,-26,-45,-46,-47,66,-27,]),'DIVIDE':([19,38,39,40,41,42,74,75,],[-48,67,-26,-45,-46,-47,67,-27,]),'LT':([19,37,38,39,40,41,42,73,74,75,],[-48,59,-24,-26,-45,-46,-47,59,-25,-27,]),'GT':([19,37,38,39,40,41,42,73,74,75,],[-48,60,-24,-26,-45,-46,-47,60,-25,-27,]),'LE':([19,37,38,39,40,41,42,73,74,75,],[-48,61,-24,-26,-45,-46,-47,61,-25,-27,]),'GE':([19,37,38,39,40,41,42,73,74,75,],[-48,62,-24,-26,-45,-46,-47,62,-25,-27,]),'EQ':([19,36,37,38,39,40,41,42,72,73,74,75,],[-48,56,-22,-24,-26,-45,-46,-47,56,-23,-25,-27,]),'NE':([19,36,37,38,39,40,41,42,72,73,74,75,],[-48,57,-22,-24,-26,-45,-46,-47,57,-23,-25,-27,]),'RPAREN':([19,35,36,37,38,39,40,41,42,72,73,74,75,],[-48,51,-20,-22,-24,-26,-45,-46,-47,-21,-23,-25,-27,]),'LAND':([19,35,36,37,38,39,40,41,42,46,72,73,74,75,],[-48,53,-20,-22,-24,-26,-45,-46,-47,53,-21,-23,-25,-27,]),'LOR':([19,35,36,37,38,39,40,41,42,46,72,73,74,75,],[-48,54,-20,-22,-24,-26,-45,-46,-47,54,-21,-23,-25,-27,]),'DIGIT':([26,30,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,],[41,41,41,-33,-34,41,-35,-36,41,-37,-38,-39,-40,41,-41,-42,-43,-44,]),'STRING_SENTENCE':([26,30,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,],[42,42,42,-33,-34,42,-35,-36,42,-37,-38,-39,-40,42,-41,-42,-43,-44,]),'WRITELINE':([32,],[49,]),'READLINE':([32,70,],[50,50,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement_list':([0,29,],[1,45,]),'statement':([0,1,29,45,],[2,20,2,20,]),'expression_statement':([0,1,29,45,],[3,3,3,3,]),'selection_statement':([0,1,29,45,],[4,4,4,4,]),'iteration_statement':([0,1,29,45,],[5,5,5,5,]),'declaration_expression':([0,1,13,29,45,],[6,6,31,6,6,]),'output_expression':([0,1,29,45,],[7,7,7,7,]),'input_expression':([0,1,29,30,45,],[8,8,8,47,8,]),'assignment_expression':([0,1,13,29,45,],[12,12,12,12,12,]),'type_specifier':([0,1,13,29,45,],[13,13,13,13,13,]),'variable_expression':([0,1,13,26,29,30,45,52,55,58,63,],[15,15,15,40,15,40,15,40,40,40,40,]),'conditional_expression':([9,10,44,49,],[25,27,68,71,]),'block_statement_list':([11,21,25,27,],[28,33,34,43,]),'logical_expression':([26,30,],[35,46,]),'equality_expression':([26,30,52,],[36,36,72,]),'relational_expression':([26,30,52,55,],[37,37,37,73,]),'math_expression':([26,30,52,55,58,],[38,38,38,38,74,]),'primary_expression':([26,30,52,55,58,63,],[39,39,39,39,39,75,]),'logical_operators':([35,46,],[52,52,]),'equality_operators':([36,72,],[55,55,]),'relational_operators':([37,73,],[58,58,]),'math_operators':([38,74,],[63,63,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement_list","S'",1,None,None,None),
  ('statement_list -> statement','statement_list',1,'p_statement_list_1','parser.py',10),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list_2','parser.py',14),
  ('statement -> expression_statement','statement',1,'p_statement','parser.py',20),
  ('statement -> selection_statement','statement',1,'p_statement','parser.py',21),
  ('statement -> iteration_statement','statement',1,'p_statement','parser.py',22),
  ('expression_statement -> declaration_expression SEMI','expression_statement',2,'p_expression_statement_1','parser.py',28),
  ('expression_statement -> output_expression SEMI','expression_statement',2,'p_expression_statement_2','parser.py',32),
  ('expression_statement -> input_expression SEMI','expression_statement',2,'p_expression_statement_3','parser.py',37),
  ('declaration_expression -> assignment_expression','declaration_expression',1,'p_declaration_expression_1','parser.py',42),
  ('declaration_expression -> type_specifier declaration_expression','declaration_expression',2,'p_declaration_expression_2','parser.py',46),
  ('selection_statement -> IF conditional_expression block_statement_list','selection_statement',3,'p_selection_statement_1','parser.py',51),
  ('selection_statement -> selection_statement ELSE block_statement_list','selection_statement',3,'p_selection_statement_2','parser.py',55),
  ('iteration_statement -> WHILE conditional_expression block_statement_list','iteration_statement',3,'p_iteration_statement_1','parser.py',60),
  ('iteration_statement -> DO block_statement_list WHILE conditional_expression SEMI','iteration_statement',5,'p_iteration_statement_2','parser.py',64),
  ('block_statement_list -> LBRACE statement_list RBRACE','block_statement_list',3,'p_block_statement_list_1','parser.py',69),
  ('conditional_expression -> LPAREN logical_expression RPAREN','conditional_expression',3,'p_conditional_expression_1','parser.py',74),
  ('assignment_expression -> variable_expression','assignment_expression',1,'p_assignment_expression_1','parser.py',79),
  ('assignment_expression -> assignment_expression EQUALS logical_expression','assignment_expression',3,'p_assignment_expression_2','parser.py',83),
  ('assignment_expression -> assignment_expression EQUALS input_expression','assignment_expression',3,'p_assignment_expression_3','parser.py',87),
  ('logical_expression -> equality_expression','logical_expression',1,'p_logical_expression_1','parser.py',92),
  ('logical_expression -> logical_expression logical_operators equality_expression','logical_expression',3,'p_logical_expression_2','parser.py',96),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression_1','parser.py',101),
  ('equality_expression -> equality_expression equality_operators relational_expression','equality_expression',3,'p_equality_expression_2','parser.py',105),
  ('relational_expression -> math_expression','relational_expression',1,'p_relational_expression_1','parser.py',110),
  ('relational_expression -> relational_expression relational_operators math_expression','relational_expression',3,'p_relational_expression_2','parser.py',114),
  ('math_expression -> primary_expression','math_expression',1,'p_math_expression_1','parser.py',119),
  ('math_expression -> math_expression math_operators primary_expression','math_expression',3,'p_math_expression_2','parser.py',123),
  ('input_expression -> CONSOLE DOT READLINE','input_expression',3,'p_input_expression','parser.py',128),
  ('output_expression -> CONSOLE DOT WRITELINE conditional_expression','output_expression',4,'p_output_expression','parser.py',133),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','parser.py',139),
  ('type_specifier -> BOOL','type_specifier',1,'p_type_specifier','parser.py',140),
  ('type_specifier -> STRING','type_specifier',1,'p_type_specifier','parser.py',141),
  ('logical_operators -> LAND','logical_operators',1,'p_logical_operators','parser.py',147),
  ('logical_operators -> LOR','logical_operators',1,'p_logical_operators','parser.py',148),
  ('equality_operators -> EQ','equality_operators',1,'p_equality_operators','parser.py',154),
  ('equality_operators -> NE','equality_operators',1,'p_equality_operators','parser.py',155),
  ('relational_operators -> LT','relational_operators',1,'p_relational_operators','parser.py',161),
  ('relational_operators -> GT','relational_operators',1,'p_relational_operators','parser.py',162),
  ('relational_operators -> LE','relational_operators',1,'p_relational_operators','parser.py',163),
  ('relational_operators -> GE','relational_operators',1,'p_relational_operators','parser.py',164),
  ('math_operators -> PLUS','math_operators',1,'p_math_operators','parser.py',170),
  ('math_operators -> MINUS','math_operators',1,'p_math_operators','parser.py',171),
  ('math_operators -> TIMES','math_operators',1,'p_math_operators','parser.py',172),
  ('math_operators -> DIVIDE','math_operators',1,'p_math_operators','parser.py',173),
  ('primary_expression -> variable_expression','primary_expression',1,'p_primary_expression','parser.py',179),
  ('primary_expression -> DIGIT','primary_expression',1,'p_primary_expression','parser.py',180),
  ('primary_expression -> STRING_SENTENCE','primary_expression',1,'p_primary_expression','parser.py',181),
  ('variable_expression -> ID','variable_expression',1,'p_variable_expression','parser.py',187),
]
