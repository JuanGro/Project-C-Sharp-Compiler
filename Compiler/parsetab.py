
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'IF ELSE DO WHILE INT BOOL STRING CONSOLE WRITELINE READLINE TRUE FALSE ID CONSTANT PLUS MINUS TIMES DIVIDE LOR LAND LT LE GT GE EQ NE EQUALS LPAREN RPAREN LBRACE RBRACE DOT SEMI STRING_SENTENCE DIGITstatement_list : emptystatement_list : statement_list statement\n    statement : expression_statement\n              | selection_statement\n              | iteration_statement\n    expression_statement : declaration_expression SEMIexpression_statement : empty SEMIexpression_statement : input_expression SEMIexpression_statement : output_expression SEMIdeclaration_expression : assignment_expressiondeclaration_expression : type_specifier declaration_expressionselection_statement : IF conditional_expression block_statement_listselection_statement : selection_statement ELSE block_statement_listiteration_statement : WHILE conditional_expression block_statement_listiteration_statement : DO block_statement_list WHILE conditional_expressionblock_statement_list : LBRACE statement_list RBRACEconditional_expression : LPAREN logical_expression RPARENassignment_expression : variable_expressionassignment_expression : assignment_expression EQUALS logical_expressionassignment_expression : assignment_expression EQUALS input_expressionlogical_expression : equality_expressionlogical_expression : logical_expression logical_operators equality_expressionequality_expression : relational_expressionequality_expression : equality_expression equality_operators relational_expressionrelational_expression : math_expressionrelational_expression : relational_expression relational_operators math_expressionmath_expression : primary_expressionmath_expression : math_expression math_operators primary_expressioninput_expression : CONSOLE DOT READLINE LPAREN RPARENoutput_expression : CONSOLE DOT WRITELINE conditional_expression\n    type_specifier : INT\n                   | BOOL\n                   | STRING\n    \n    logical_operators : LAND\n                      | LOR\n    \n    equality_operators : EQ\n                       | NE\n    \n    relational_operators : LT\n                         | GT\n                         | LE\n                         | GE\n    \n    math_operators : PLUS\n                   | MINUS\n                   | TIMES\n                   | DIVIDE\n    \n    primary_expression :  variable_expression\n                       |  DIGIT\n                       |  STRING_SENTENCE\n                       |  boolean_expression\n    \n    variable_expression : ID\n                        | CONSTANT\n    \n    boolean_expression : TRUE\n                       | FALSE\n    empty : '
    
_lr_action_items = {'IF':([0,1,2,3,4,5,6,24,25,26,27,32,36,37,49,51,57,74,75,],[-54,11,-1,-2,-3,-4,-5,-6,-7,-8,-9,-54,-13,-12,-14,11,-17,-15,-16,]),'WHILE':([0,1,2,3,4,5,6,24,25,26,27,31,32,36,37,49,51,57,74,75,],[-54,12,-1,-2,-3,-4,-5,-6,-7,-8,-9,50,-54,-13,-12,-14,12,-17,-15,-16,]),'DO':([0,1,2,3,4,5,6,24,25,26,27,32,36,37,49,51,57,74,75,],[-54,13,-1,-2,-3,-4,-5,-6,-7,-8,-9,-54,-13,-12,-14,13,-17,-15,-16,]),'CONSOLE':([0,1,2,3,4,5,6,24,25,26,27,32,33,36,37,49,51,57,74,75,],[-54,16,-1,-2,-3,-4,-5,-6,-7,-8,-9,-54,54,-13,-12,-14,16,-17,-15,-16,]),'INT':([0,1,2,3,4,5,6,15,18,19,20,24,25,26,27,32,36,37,49,51,57,74,75,],[-54,18,-1,-2,-3,-4,-5,18,-31,-32,-33,-6,-7,-8,-9,-54,-13,-12,-14,18,-17,-15,-16,]),'BOOL':([0,1,2,3,4,5,6,15,18,19,20,24,25,26,27,32,36,37,49,51,57,74,75,],[-54,19,-1,-2,-3,-4,-5,19,-31,-32,-33,-6,-7,-8,-9,-54,-13,-12,-14,19,-17,-15,-16,]),'STRING':([0,1,2,3,4,5,6,15,18,19,20,24,25,26,27,32,36,37,49,51,57,74,75,],[-54,20,-1,-2,-3,-4,-5,20,-31,-32,-33,-6,-7,-8,-9,-54,-13,-12,-14,20,-17,-15,-16,]),'ID':([0,1,2,3,4,5,6,15,18,19,20,24,25,26,27,29,32,33,36,37,49,51,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,],[-54,21,-1,-2,-3,-4,-5,21,-31,-32,-33,-6,-7,-8,-9,21,-54,21,-13,-12,-14,21,-17,21,-34,-35,21,-36,-37,21,-38,-39,-40,-41,21,-42,-43,-44,-45,-15,-16,]),'CONSTANT':([0,1,2,3,4,5,6,15,18,19,20,24,25,26,27,29,32,33,36,37,49,51,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,],[-54,22,-1,-2,-3,-4,-5,22,-31,-32,-33,-6,-7,-8,-9,22,-54,22,-13,-12,-14,22,-17,22,-34,-35,22,-36,-37,22,-38,-39,-40,-41,22,-42,-43,-44,-45,-15,-16,]),'$end':([0,1,2,3,4,5,6,24,25,26,27,36,37,49,57,74,75,],[-54,0,-1,-2,-3,-4,-5,-6,-7,-8,-9,-13,-12,-14,-17,-15,-16,]),'SEMI':([0,1,2,3,4,5,6,7,8,9,10,14,17,21,22,24,25,26,27,32,34,36,37,39,40,41,42,43,44,45,46,47,48,49,51,52,53,57,74,75,78,79,80,81,82,83,],[-54,-54,-1,-2,-3,-4,-5,24,25,26,27,-10,-18,-50,-51,-6,-7,-8,-9,-54,-11,-13,-12,-21,-23,-25,-27,-46,-47,-48,-49,-52,-53,-14,-54,-19,-20,-17,-15,-16,-30,-22,-24,-26,-28,-29,]),'RBRACE':([2,3,4,5,6,24,25,26,27,32,36,37,49,51,57,74,75,],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-54,-13,-12,-14,75,-17,-15,-16,]),'ELSE':([5,36,37,75,],[23,-13,-12,-16,]),'LPAREN':([11,12,50,55,56,],[29,29,29,77,29,]),'LBRACE':([13,23,28,30,57,],[32,32,32,32,-17,]),'EQUALS':([14,17,21,22,39,40,41,42,43,44,45,46,47,48,52,53,79,80,81,82,83,],[33,-18,-50,-51,-21,-23,-25,-27,-46,-47,-48,-49,-52,-53,-19,-20,-22,-24,-26,-28,-29,]),'DOT':([16,54,],[35,76,]),'PLUS':([21,22,41,42,43,44,45,46,47,48,81,82,],[-50,-51,70,-27,-46,-47,-48,-49,-52,-53,70,-28,]),'MINUS':([21,22,41,42,43,44,45,46,47,48,81,82,],[-50,-51,71,-27,-46,-47,-48,-49,-52,-53,71,-28,]),'TIMES':([21,22,41,42,43,44,45,46,47,48,81,82,],[-50,-51,72,-27,-46,-47,-48,-49,-52,-53,72,-28,]),'DIVIDE':([21,22,41,42,43,44,45,46,47,48,81,82,],[-50,-51,73,-27,-46,-47,-48,-49,-52,-53,73,-28,]),'LT':([21,22,40,41,42,43,44,45,46,47,48,80,81,82,],[-50,-51,65,-25,-27,-46,-47,-48,-49,-52,-53,65,-26,-28,]),'GT':([21,22,40,41,42,43,44,45,46,47,48,80,81,82,],[-50,-51,66,-25,-27,-46,-47,-48,-49,-52,-53,66,-26,-28,]),'LE':([21,22,40,41,42,43,44,45,46,47,48,80,81,82,],[-50,-51,67,-25,-27,-46,-47,-48,-49,-52,-53,67,-26,-28,]),'GE':([21,22,40,41,42,43,44,45,46,47,48,80,81,82,],[-50,-51,68,-25,-27,-46,-47,-48,-49,-52,-53,68,-26,-28,]),'EQ':([21,22,39,40,41,42,43,44,45,46,47,48,79,80,81,82,],[-50,-51,62,-23,-25,-27,-46,-47,-48,-49,-52,-53,62,-24,-26,-28,]),'NE':([21,22,39,40,41,42,43,44,45,46,47,48,79,80,81,82,],[-50,-51,63,-23,-25,-27,-46,-47,-48,-49,-52,-53,63,-24,-26,-28,]),'RPAREN':([21,22,38,39,40,41,42,43,44,45,46,47,48,77,79,80,81,82,],[-50,-51,57,-21,-23,-25,-27,-46,-47,-48,-49,-52,-53,83,-22,-24,-26,-28,]),'LAND':([21,22,38,39,40,41,42,43,44,45,46,47,48,52,79,80,81,82,],[-50,-51,59,-21,-23,-25,-27,-46,-47,-48,-49,-52,-53,59,-22,-24,-26,-28,]),'LOR':([21,22,38,39,40,41,42,43,44,45,46,47,48,52,79,80,81,82,],[-50,-51,60,-21,-23,-25,-27,-46,-47,-48,-49,-52,-53,60,-22,-24,-26,-28,]),'DIGIT':([29,33,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,],[44,44,44,-34,-35,44,-36,-37,44,-38,-39,-40,-41,44,-42,-43,-44,-45,]),'STRING_SENTENCE':([29,33,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,],[45,45,45,-34,-35,45,-36,-37,45,-38,-39,-40,-41,45,-42,-43,-44,-45,]),'TRUE':([29,33,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,],[47,47,47,-34,-35,47,-36,-37,47,-38,-39,-40,-41,47,-42,-43,-44,-45,]),'FALSE':([29,33,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,],[48,48,48,-34,-35,48,-36,-37,48,-38,-39,-40,-41,48,-42,-43,-44,-45,]),'READLINE':([35,76,],[55,55,]),'WRITELINE':([35,],[56,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement_list':([0,32,],[1,51,]),'empty':([0,1,32,51,],[2,8,2,8,]),'statement':([1,51,],[3,3,]),'expression_statement':([1,51,],[4,4,]),'selection_statement':([1,51,],[5,5,]),'iteration_statement':([1,51,],[6,6,]),'declaration_expression':([1,15,51,],[7,34,7,]),'input_expression':([1,33,51,],[9,53,9,]),'output_expression':([1,51,],[10,10,]),'assignment_expression':([1,15,51,],[14,14,14,]),'type_specifier':([1,15,51,],[15,15,15,]),'variable_expression':([1,15,29,33,51,58,61,64,69,],[17,17,43,43,17,43,43,43,43,]),'conditional_expression':([11,12,50,56,],[28,30,74,78,]),'block_statement_list':([13,23,28,30,],[31,36,37,49,]),'logical_expression':([29,33,],[38,52,]),'equality_expression':([29,33,58,],[39,39,79,]),'relational_expression':([29,33,58,61,],[40,40,40,80,]),'math_expression':([29,33,58,61,64,],[41,41,41,41,81,]),'primary_expression':([29,33,58,61,64,69,],[42,42,42,42,42,82,]),'boolean_expression':([29,33,58,61,64,69,],[46,46,46,46,46,46,]),'logical_operators':([38,52,],[58,58,]),'equality_operators':([39,79,],[61,61,]),'relational_operators':([40,80,],[64,64,]),'math_operators':([41,81,],[69,69,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement_list","S'",1,None,None,None),
  ('statement_list -> empty','statement_list',1,'p_statement_list_1','parser.py',10),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list_2','parser.py',18),
  ('statement -> expression_statement','statement',1,'p_statement','parser.py',24),
  ('statement -> selection_statement','statement',1,'p_statement','parser.py',25),
  ('statement -> iteration_statement','statement',1,'p_statement','parser.py',26),
  ('expression_statement -> declaration_expression SEMI','expression_statement',2,'p_expression_statement_1','parser.py',32),
  ('expression_statement -> empty SEMI','expression_statement',2,'p_expression_statement_2','parser.py',36),
  ('expression_statement -> input_expression SEMI','expression_statement',2,'p_expression_statement_3','parser.py',40),
  ('expression_statement -> output_expression SEMI','expression_statement',2,'p_expression_statement_4','parser.py',44),
  ('declaration_expression -> assignment_expression','declaration_expression',1,'p_declaration_expression_1','parser.py',49),
  ('declaration_expression -> type_specifier declaration_expression','declaration_expression',2,'p_declaration_expression_2','parser.py',53),
  ('selection_statement -> IF conditional_expression block_statement_list','selection_statement',3,'p_selection_statement_1','parser.py',58),
  ('selection_statement -> selection_statement ELSE block_statement_list','selection_statement',3,'p_selection_statement_2','parser.py',62),
  ('iteration_statement -> WHILE conditional_expression block_statement_list','iteration_statement',3,'p_iteration_statement_1','parser.py',67),
  ('iteration_statement -> DO block_statement_list WHILE conditional_expression','iteration_statement',4,'p_iteration_statement_2','parser.py',71),
  ('block_statement_list -> LBRACE statement_list RBRACE','block_statement_list',3,'p_block_statement_list_1','parser.py',76),
  ('conditional_expression -> LPAREN logical_expression RPAREN','conditional_expression',3,'p_conditional_expression_1','parser.py',81),
  ('assignment_expression -> variable_expression','assignment_expression',1,'p_assignment_expression_1','parser.py',86),
  ('assignment_expression -> assignment_expression EQUALS logical_expression','assignment_expression',3,'p_assignment_expression_2','parser.py',90),
  ('assignment_expression -> assignment_expression EQUALS input_expression','assignment_expression',3,'p_assignment_expression_3','parser.py',94),
  ('logical_expression -> equality_expression','logical_expression',1,'p_logical_expression_1','parser.py',99),
  ('logical_expression -> logical_expression logical_operators equality_expression','logical_expression',3,'p_logical_expression_2','parser.py',103),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression_1','parser.py',108),
  ('equality_expression -> equality_expression equality_operators relational_expression','equality_expression',3,'p_equality_expression_2','parser.py',112),
  ('relational_expression -> math_expression','relational_expression',1,'p_relational_expression_1','parser.py',117),
  ('relational_expression -> relational_expression relational_operators math_expression','relational_expression',3,'p_relational_expression_2','parser.py',121),
  ('math_expression -> primary_expression','math_expression',1,'p_math_expression_1','parser.py',126),
  ('math_expression -> math_expression math_operators primary_expression','math_expression',3,'p_math_expression_2','parser.py',130),
  ('input_expression -> CONSOLE DOT READLINE LPAREN RPAREN','input_expression',5,'p_input_expression','parser.py',135),
  ('output_expression -> CONSOLE DOT WRITELINE conditional_expression','output_expression',4,'p_output_expression','parser.py',140),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','parser.py',146),
  ('type_specifier -> BOOL','type_specifier',1,'p_type_specifier','parser.py',147),
  ('type_specifier -> STRING','type_specifier',1,'p_type_specifier','parser.py',148),
  ('logical_operators -> LAND','logical_operators',1,'p_logical_operators','parser.py',154),
  ('logical_operators -> LOR','logical_operators',1,'p_logical_operators','parser.py',155),
  ('equality_operators -> EQ','equality_operators',1,'p_equality_operators','parser.py',161),
  ('equality_operators -> NE','equality_operators',1,'p_equality_operators','parser.py',162),
  ('relational_operators -> LT','relational_operators',1,'p_relational_operators','parser.py',168),
  ('relational_operators -> GT','relational_operators',1,'p_relational_operators','parser.py',169),
  ('relational_operators -> LE','relational_operators',1,'p_relational_operators','parser.py',170),
  ('relational_operators -> GE','relational_operators',1,'p_relational_operators','parser.py',171),
  ('math_operators -> PLUS','math_operators',1,'p_math_operators','parser.py',177),
  ('math_operators -> MINUS','math_operators',1,'p_math_operators','parser.py',178),
  ('math_operators -> TIMES','math_operators',1,'p_math_operators','parser.py',179),
  ('math_operators -> DIVIDE','math_operators',1,'p_math_operators','parser.py',180),
  ('primary_expression -> variable_expression','primary_expression',1,'p_primary_expression','parser.py',186),
  ('primary_expression -> DIGIT','primary_expression',1,'p_primary_expression','parser.py',187),
  ('primary_expression -> STRING_SENTENCE','primary_expression',1,'p_primary_expression','parser.py',188),
  ('primary_expression -> boolean_expression','primary_expression',1,'p_primary_expression','parser.py',189),
  ('variable_expression -> ID','variable_expression',1,'p_variable_expression','parser.py',195),
  ('variable_expression -> CONSTANT','variable_expression',1,'p_variable_expression','parser.py',196),
  ('boolean_expression -> TRUE','boolean_expression',1,'p_boolean_expression','parser.py',202),
  ('boolean_expression -> FALSE','boolean_expression',1,'p_boolean_expression','parser.py',203),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',207),
]
